
micro_pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004284  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800443c  0800443c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800443c  0800443c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800443c  0800443c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800443c  0800443c  0001443c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000148  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000158  20000158  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a55  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019a6  00000000  00000000  00029a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  0002b440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007a0  00000000  00000000  0002bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cfd7  00000000  00000000  0002c430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a28a  00000000  00000000  00049407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1575  00000000  00000000  00053691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00104c06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002150  00000000  00000000  00104c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043f4 	.word	0x080043f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080043f4 	.word	0x080043f4

080001c8 <crc_checksum>:
uint8_t crc_checksum(uint8_t *dat, int len, const uint8_t poly) {
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4613      	mov	r3, r2
 80001d4:	71fb      	strb	r3, [r7, #7]
  uint8_t crc = 0xFFU;
 80001d6:	23ff      	movs	r3, #255	; 0xff
 80001d8:	77fb      	strb	r3, [r7, #31]
  int i;
  int j;
  for (i = len - 1; i >= 0; i--) {
 80001da:	68bb      	ldr	r3, [r7, #8]
 80001dc:	3b01      	subs	r3, #1
 80001de:	61bb      	str	r3, [r7, #24]
 80001e0:	e022      	b.n	8000228 <crc_checksum+0x60>
    crc ^= dat[i];
 80001e2:	69bb      	ldr	r3, [r7, #24]
 80001e4:	68fa      	ldr	r2, [r7, #12]
 80001e6:	4413      	add	r3, r2
 80001e8:	781a      	ldrb	r2, [r3, #0]
 80001ea:	7ffb      	ldrb	r3, [r7, #31]
 80001ec:	4053      	eors	r3, r2
 80001ee:	77fb      	strb	r3, [r7, #31]
    for (j = 0; j < 8; j++) {
 80001f0:	2300      	movs	r3, #0
 80001f2:	617b      	str	r3, [r7, #20]
 80001f4:	e012      	b.n	800021c <crc_checksum+0x54>
      if ((crc & 0x80U) != 0U) {
 80001f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	da08      	bge.n	8000210 <crc_checksum+0x48>
        crc = (uint8_t)((crc << 1) ^ poly);
 80001fe:	7ffb      	ldrb	r3, [r7, #31]
 8000200:	005b      	lsls	r3, r3, #1
 8000202:	b25a      	sxtb	r2, r3
 8000204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000208:	4053      	eors	r3, r2
 800020a:	b25b      	sxtb	r3, r3
 800020c:	77fb      	strb	r3, [r7, #31]
 800020e:	e002      	b.n	8000216 <crc_checksum+0x4e>
      }
      else {
        crc <<= 1;
 8000210:	7ffb      	ldrb	r3, [r7, #31]
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	77fb      	strb	r3, [r7, #31]
    for (j = 0; j < 8; j++) {
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	3301      	adds	r3, #1
 800021a:	617b      	str	r3, [r7, #20]
 800021c:	697b      	ldr	r3, [r7, #20]
 800021e:	2b07      	cmp	r3, #7
 8000220:	dde9      	ble.n	80001f6 <crc_checksum+0x2e>
  for (i = len - 1; i >= 0; i--) {
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	3b01      	subs	r3, #1
 8000226:	61bb      	str	r3, [r7, #24]
 8000228:	69bb      	ldr	r3, [r7, #24]
 800022a:	2b00      	cmp	r3, #0
 800022c:	dad9      	bge.n	80001e2 <crc_checksum+0x1a>
      }
    }
  }
  return crc;
 800022e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000230:	4618      	mov	r0, r3
 8000232:	3724      	adds	r7, #36	; 0x24
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000242:	f000 fd79 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000246:	f000 f8ef 	bl	8000428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024a:	f000 fa8b 	bl	8000764 <MX_GPIO_Init>
  MX_ADC1_Init();
 800024e:	f000 f931 	bl	80004b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000252:	f000 f99f 	bl	8000594 <MX_ADC2_Init>
  MX_CAN_Init();
 8000256:	f000 f9fb 	bl	8000650 <MX_CAN_Init>
  MX_DAC_Init();
 800025a:	f000 fa4d 	bl	80006f8 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  ENABLE_CAN_TRANSCEIVER();
 800025e:	2200      	movs	r2, #0
 8000260:	2108      	movs	r1, #8
 8000262:	4864      	ldr	r0, [pc, #400]	; (80003f4 <main+0x1b8>)
 8000264:	f002 fe58 	bl	8002f18 <HAL_GPIO_WritePin>
  LED_OFF();
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800026e:	4861      	ldr	r0, [pc, #388]	; (80003f4 <main+0x1b8>)
 8000270:	f002 fe52 	bl	8002f18 <HAL_GPIO_WritePin>
  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000274:	4860      	ldr	r0, [pc, #384]	; (80003f8 <main+0x1bc>)
 8000276:	f002 f838 	bl	80022ea <HAL_CAN_Start>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d005      	beq.n	800028c <main+0x50>
	  LED_ON();
 8000280:	2201      	movs	r2, #1
 8000282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000286:	485b      	ldr	r0, [pc, #364]	; (80003f4 <main+0x1b8>)
 8000288:	f002 fe46 	bl	8002f18 <HAL_GPIO_WritePin>
  }
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800028c:	2102      	movs	r1, #2
 800028e:	485a      	ldr	r0, [pc, #360]	; (80003f8 <main+0x1bc>)
 8000290:	f002 fadd 	bl	800284e <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000294:	2110      	movs	r1, #16
 8000296:	4858      	ldr	r0, [pc, #352]	; (80003f8 <main+0x1bc>)
 8000298:	f002 fad9 	bl	800284e <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  readCAN();
 800029c:	f000 fba0 	bl	80009e0 <readCAN>
	  int tick = HAL_GetTick();
 80002a0:	f000 fda4 	bl	8000dec <HAL_GetTick>
 80002a4:	4603      	mov	r3, r0
 80002a6:	60fb      	str	r3, [r7, #12]
	  if (timeout == MAX_TIMEOUT) {
 80002a8:	4b54      	ldr	r3, [pc, #336]	; (80003fc <main+0x1c0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002b0:	d103      	bne.n	80002ba <main+0x7e>
	    state = FAULT_TIMEOUT;
 80002b2:	4b53      	ldr	r3, [pc, #332]	; (8000400 <main+0x1c4>)
 80002b4:	2205      	movs	r2, #5
 80002b6:	701a      	strb	r2, [r3, #0]
 80002b8:	e004      	b.n	80002c4 <main+0x88>
	  } else {
	    timeout += 1U;
 80002ba:	4b50      	ldr	r3, [pc, #320]	; (80003fc <main+0x1c0>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	3301      	adds	r3, #1
 80002c0:	4a4e      	ldr	r2, [pc, #312]	; (80003fc <main+0x1c0>)
 80002c2:	6013      	str	r3, [r2, #0]
	  }

	  if (tick - last_tick >= 20) {
 80002c4:	4b4f      	ldr	r3, [pc, #316]	; (8000404 <main+0x1c8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	1ad3      	subs	r3, r2, r3
 80002cc:	2b13      	cmp	r3, #19
 80002ce:	dd38      	ble.n	8000342 <main+0x106>
		  uint8_t dat[6];
		  dat[0] = (pdl0 >> 8) & 0xFFU;
 80002d0:	4b4d      	ldr	r3, [pc, #308]	; (8000408 <main+0x1cc>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	0a1b      	lsrs	r3, r3, #8
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	713b      	strb	r3, [r7, #4]
		  dat[1] = (pdl0 >> 0) & 0xFFU;
 80002da:	4b4b      	ldr	r3, [pc, #300]	; (8000408 <main+0x1cc>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	717b      	strb	r3, [r7, #5]
		  dat[2] = (pdl1 >> 8) & 0xFFU;
 80002e2:	4b4a      	ldr	r3, [pc, #296]	; (800040c <main+0x1d0>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	0a1b      	lsrs	r3, r3, #8
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	71bb      	strb	r3, [r7, #6]
		  dat[3] = (pdl1 >> 0) & 0xFFU;
 80002ec:	4b47      	ldr	r3, [pc, #284]	; (800040c <main+0x1d0>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	71fb      	strb	r3, [r7, #7]
		  dat[4] = ((state & 0xFU) << 4) | pkt_idx;
 80002f4:	4b42      	ldr	r3, [pc, #264]	; (8000400 <main+0x1c4>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	011b      	lsls	r3, r3, #4
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	4b44      	ldr	r3, [pc, #272]	; (8000410 <main+0x1d4>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	4313      	orrs	r3, r2
 8000304:	b2db      	uxtb	r3, r3
 8000306:	723b      	strb	r3, [r7, #8]
		  dat[5] = crc_checksum(dat, CAN_GAS_SIZE - 1, crc_poly);
 8000308:	22d5      	movs	r2, #213	; 0xd5
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2105      	movs	r1, #5
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ff5a 	bl	80001c8 <crc_checksum>
 8000314:	4603      	mov	r3, r0
 8000316:	727b      	strb	r3, [r7, #9]
		  sendCAN(CAN_GAS_OUTPUT, dat, 6);
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2206      	movs	r2, #6
 800031c:	4619      	mov	r1, r3
 800031e:	f240 2001 	movw	r0, #513	; 0x201
 8000322:	f000 fa85 	bl	8000830 <sendCAN>
		  ++pkt_idx;
 8000326:	4b3a      	ldr	r3, [pc, #232]	; (8000410 <main+0x1d4>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	4a38      	ldr	r2, [pc, #224]	; (8000410 <main+0x1d4>)
 800032e:	6013      	str	r3, [r2, #0]
		  pkt_idx &= COUNTER_CYCLE;
 8000330:	4b37      	ldr	r3, [pc, #220]	; (8000410 <main+0x1d4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f003 030f 	and.w	r3, r3, #15
 8000338:	4a35      	ldr	r2, [pc, #212]	; (8000410 <main+0x1d4>)
 800033a:	6013      	str	r3, [r2, #0]
		  last_tick = tick;
 800033c:	4a31      	ldr	r2, [pc, #196]	; (8000404 <main+0x1c8>)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	6013      	str	r3, [r2, #0]
	  }

	  HAL_ADC_Start(&hadc1);
 8000342:	4834      	ldr	r0, [pc, #208]	; (8000414 <main+0x1d8>)
 8000344:	f000 ff3e 	bl	80011c4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000348:	2101      	movs	r1, #1
 800034a:	4832      	ldr	r0, [pc, #200]	; (8000414 <main+0x1d8>)
 800034c:	f001 f850 	bl	80013f0 <HAL_ADC_PollForConversion>
	  pdl0 = HAL_ADC_GetValue(&hadc1);
 8000350:	4830      	ldr	r0, [pc, #192]	; (8000414 <main+0x1d8>)
 8000352:	f001 f94f 	bl	80015f4 <HAL_ADC_GetValue>
 8000356:	4603      	mov	r3, r0
 8000358:	4a2b      	ldr	r2, [pc, #172]	; (8000408 <main+0x1cc>)
 800035a:	6013      	str	r3, [r2, #0]

	  HAL_ADC_Start(&hadc2);
 800035c:	482e      	ldr	r0, [pc, #184]	; (8000418 <main+0x1dc>)
 800035e:	f000 ff31 	bl	80011c4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 1);
 8000362:	2101      	movs	r1, #1
 8000364:	482c      	ldr	r0, [pc, #176]	; (8000418 <main+0x1dc>)
 8000366:	f001 f843 	bl	80013f0 <HAL_ADC_PollForConversion>
	  pdl1 = HAL_ADC_GetValue(&hadc2);
 800036a:	482b      	ldr	r0, [pc, #172]	; (8000418 <main+0x1dc>)
 800036c:	f001 f942 	bl	80015f4 <HAL_ADC_GetValue>
 8000370:	4603      	mov	r3, r0
 8000372:	4a26      	ldr	r2, [pc, #152]	; (800040c <main+0x1d0>)
 8000374:	6013      	str	r3, [r2, #0]

	  // write the pedal to the DAC
	  if (state == NO_FAULT) {
 8000376:	4b22      	ldr	r3, [pc, #136]	; (8000400 <main+0x1c4>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d122      	bne.n	80003c4 <main+0x188>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, MAX(gas_set_0, pdl0));
 800037e:	4b27      	ldr	r3, [pc, #156]	; (800041c <main+0x1e0>)
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	461a      	mov	r2, r3
 8000384:	4b20      	ldr	r3, [pc, #128]	; (8000408 <main+0x1cc>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4293      	cmp	r3, r2
 800038a:	bf38      	it	cc
 800038c:	4613      	movcc	r3, r2
 800038e:	2200      	movs	r2, #0
 8000390:	2100      	movs	r1, #0
 8000392:	4823      	ldr	r0, [pc, #140]	; (8000420 <main+0x1e4>)
 8000394:	f002 fb89 	bl	8002aaa <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000398:	2100      	movs	r1, #0
 800039a:	4821      	ldr	r0, [pc, #132]	; (8000420 <main+0x1e4>)
 800039c:	f002 fbaa 	bl	8002af4 <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, MAX(gas_set_1, pdl1));
 80003a0:	4b20      	ldr	r3, [pc, #128]	; (8000424 <main+0x1e8>)
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	461a      	mov	r2, r3
 80003a6:	4b19      	ldr	r3, [pc, #100]	; (800040c <main+0x1d0>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4293      	cmp	r3, r2
 80003ac:	bf38      	it	cc
 80003ae:	4613      	movcc	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	2110      	movs	r1, #16
 80003b4:	481a      	ldr	r0, [pc, #104]	; (8000420 <main+0x1e4>)
 80003b6:	f002 fb78 	bl	8002aaa <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80003ba:	2110      	movs	r1, #16
 80003bc:	4818      	ldr	r0, [pc, #96]	; (8000420 <main+0x1e4>)
 80003be:	f002 fb99 	bl	8002af4 <HAL_DAC_Start>
 80003c2:	e76b      	b.n	800029c <main+0x60>
	  } else {
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, pdl0);
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <main+0x1cc>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2200      	movs	r2, #0
 80003ca:	2100      	movs	r1, #0
 80003cc:	4814      	ldr	r0, [pc, #80]	; (8000420 <main+0x1e4>)
 80003ce:	f002 fb6c 	bl	8002aaa <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80003d2:	2100      	movs	r1, #0
 80003d4:	4812      	ldr	r0, [pc, #72]	; (8000420 <main+0x1e4>)
 80003d6:	f002 fb8d 	bl	8002af4 <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, pdl1);
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <main+0x1d0>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2200      	movs	r2, #0
 80003e0:	2110      	movs	r1, #16
 80003e2:	480f      	ldr	r0, [pc, #60]	; (8000420 <main+0x1e4>)
 80003e4:	f002 fb61 	bl	8002aaa <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80003e8:	2110      	movs	r1, #16
 80003ea:	480d      	ldr	r0, [pc, #52]	; (8000420 <main+0x1e4>)
 80003ec:	f002 fb82 	bl	8002af4 <HAL_DAC_Start>
  while (1) {
 80003f0:	e754      	b.n	800029c <main+0x60>
 80003f2:	bf00      	nop
 80003f4:	48000400 	.word	0x48000400
 80003f8:	200000cc 	.word	0x200000cc
 80003fc:	20000138 	.word	0x20000138
 8000400:	20000000 	.word	0x20000000
 8000404:	2000014c 	.word	0x2000014c
 8000408:	20000140 	.word	0x20000140
 800040c:	20000144 	.word	0x20000144
 8000410:	20000148 	.word	0x20000148
 8000414:	2000002c 	.word	0x2000002c
 8000418:	2000007c 	.word	0x2000007c
 800041c:	20000134 	.word	0x20000134
 8000420:	200000f4 	.word	0x200000f4
 8000424:	20000136 	.word	0x20000136

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b090      	sub	sp, #64	; 0x40
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0318 	add.w	r3, r7, #24
 8000432:	2228      	movs	r2, #40	; 0x28
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f003 ffd4 	bl	80043e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800044a:	2301      	movs	r3, #1
 800044c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800044e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000452:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000458:	2301      	movs	r3, #1
 800045a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045c:	2302      	movs	r3, #2
 800045e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000464:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000466:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800046a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046c:	f107 0318 	add.w	r3, r7, #24
 8000470:	4618      	mov	r0, r3
 8000472:	f002 fd69 	bl	8002f48 <HAL_RCC_OscConfig>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800047c:	f000 facc 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000480:	230f      	movs	r3, #15
 8000482:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000484:	2302      	movs	r3, #2
 8000486:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000490:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2102      	movs	r1, #2
 800049a:	4618      	mov	r0, r3
 800049c:	f003 fd96 	bl	8003fcc <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004a6:	f000 fab7 	bl	8000a18 <Error_Handler>
  }
}
 80004aa:	bf00      	nop
 80004ac:	3740      	adds	r7, #64	; 0x40
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004ba:	f107 031c 	add.w	r3, r7, #28
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
 80004d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d6:	4b2e      	ldr	r3, [pc, #184]	; (8000590 <MX_ADC1_Init+0xdc>)
 80004d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80004dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004de:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <MX_ADC1_Init+0xdc>)
 80004e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e6:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <MX_ADC1_Init+0xdc>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ec:	4b28      	ldr	r3, [pc, #160]	; (8000590 <MX_ADC1_Init+0xdc>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f2:	4b27      	ldr	r3, [pc, #156]	; (8000590 <MX_ADC1_Init+0xdc>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f8:	4b25      	ldr	r3, [pc, #148]	; (8000590 <MX_ADC1_Init+0xdc>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000500:	4b23      	ldr	r3, [pc, #140]	; (8000590 <MX_ADC1_Init+0xdc>)
 8000502:	2200      	movs	r2, #0
 8000504:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000506:	4b22      	ldr	r3, [pc, #136]	; (8000590 <MX_ADC1_Init+0xdc>)
 8000508:	2201      	movs	r2, #1
 800050a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050c:	4b20      	ldr	r3, [pc, #128]	; (8000590 <MX_ADC1_Init+0xdc>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000512:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_ADC1_Init+0xdc>)
 8000514:	2201      	movs	r2, #1
 8000516:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000518:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <MX_ADC1_Init+0xdc>)
 800051a:	2200      	movs	r2, #0
 800051c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <MX_ADC1_Init+0xdc>)
 8000522:	2204      	movs	r2, #4
 8000524:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_ADC1_Init+0xdc>)
 8000528:	2200      	movs	r2, #0
 800052a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_ADC1_Init+0xdc>)
 800052e:	2200      	movs	r2, #0
 8000530:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000532:	4817      	ldr	r0, [pc, #92]	; (8000590 <MX_ADC1_Init+0xdc>)
 8000534:	f000 fc66 	bl	8000e04 <HAL_ADC_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800053e:	f000 fa6b 	bl	8000a18 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	4619      	mov	r1, r3
 800054c:	4810      	ldr	r0, [pc, #64]	; (8000590 <MX_ADC1_Init+0xdc>)
 800054e:	f001 fb4b 	bl	8001be8 <HAL_ADCEx_MultiModeConfigChannel>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000558:	f000 fa5e 	bl	8000a18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800055c:	2306      	movs	r3, #6
 800055e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000560:	2301      	movs	r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	4619      	mov	r1, r3
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_ADC1_Init+0xdc>)
 800057a:	f001 f849 	bl	8001610 <HAL_ADC_ConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000584:	f000 fa48 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	3728      	adds	r7, #40	; 0x28
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000002c 	.word	0x2000002c

08000594 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	463b      	mov	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
 80005a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005aa:	4b27      	ldr	r3, [pc, #156]	; (8000648 <MX_ADC2_Init+0xb4>)
 80005ac:	4a27      	ldr	r2, [pc, #156]	; (800064c <MX_ADC2_Init+0xb8>)
 80005ae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <MX_ADC2_Init+0xb4>)
 80005b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005b6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <MX_ADC2_Init+0xb4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <MX_ADC2_Init+0xb4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <MX_ADC2_Init+0xb4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005ca:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <MX_ADC2_Init+0xb4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d2:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <MX_ADC2_Init+0xb4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_ADC2_Init+0xb4>)
 80005da:	2201      	movs	r2, #1
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_ADC2_Init+0xb4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_ADC2_Init+0xb4>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_ADC2_Init+0xb4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_ADC2_Init+0xb4>)
 80005f4:	2204      	movs	r2, #4
 80005f6:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_ADC2_Init+0xb4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_ADC2_Init+0xb4>)
 8000600:	2200      	movs	r2, #0
 8000602:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000604:	4810      	ldr	r0, [pc, #64]	; (8000648 <MX_ADC2_Init+0xb4>)
 8000606:	f000 fbfd 	bl	8000e04 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000610:	f000 fa02 	bl	8000a18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000614:	2307      	movs	r3, #7
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_ADC2_Init+0xb4>)
 8000632:	f000 ffed 	bl	8001610 <HAL_ADC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800063c:	f000 f9ec 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000007c 	.word	0x2000007c
 800064c:	50000100 	.word	0x50000100

08000650 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <MX_CAN_Init+0x9c>)
 8000656:	4a26      	ldr	r2, [pc, #152]	; (80006f0 <MX_CAN_Init+0xa0>)
 8000658:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800065a:	4b24      	ldr	r3, [pc, #144]	; (80006ec <MX_CAN_Init+0x9c>)
 800065c:	2204      	movs	r2, #4
 800065e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <MX_CAN_Init+0x9c>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_CAN_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_CAN_Init+0x9c>)
 800066e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000672:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_CAN_Init+0x9c>)
 8000676:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800067a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_CAN_Init+0x9c>)
 800067e:	2200      	movs	r2, #0
 8000680:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_CAN_Init+0x9c>)
 8000684:	2200      	movs	r2, #0
 8000686:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_CAN_Init+0x9c>)
 800068a:	2200      	movs	r2, #0
 800068c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_CAN_Init+0x9c>)
 8000690:	2200      	movs	r2, #0
 8000692:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_CAN_Init+0x9c>)
 8000696:	2200      	movs	r2, #0
 8000698:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_CAN_Init+0x9c>)
 800069c:	2200      	movs	r2, #0
 800069e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <MX_CAN_Init+0x9c>)
 80006a2:	f001 fc5d 	bl	8001f60 <HAL_CAN_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80006ac:	f000 f9b4 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_CAN_Init+0xa4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_CAN_Init+0xa4>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	61da      	str	r2, [r3, #28]
  canfil.FilterIdHigh = 0x0000;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_CAN_Init+0xa4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0x0000;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_CAN_Init+0xa4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0x0000;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_CAN_Init+0xa4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0x0000;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_CAN_Init+0xa4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  canfil.FilterFIFOAssignment = 0;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_CAN_Init+0xa4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  canfil.FilterActivation = ENABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_CAN_Init+0xa4>)
 80006dc:	2201      	movs	r2, #1
 80006de:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &canfil);
 80006e0:	4904      	ldr	r1, [pc, #16]	; (80006f4 <MX_CAN_Init+0xa4>)
 80006e2:	4802      	ldr	r0, [pc, #8]	; (80006ec <MX_CAN_Init+0x9c>)
 80006e4:	f001 fd37 	bl	8002156 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000cc 	.word	0x200000cc
 80006f0:	40006400 	.word	0x40006400
 80006f4:	2000010c 	.word	0x2000010c

080006f8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_DAC_Init+0x64>)
 800070a:	4a15      	ldr	r2, [pc, #84]	; (8000760 <MX_DAC_Init+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800070e:	4813      	ldr	r0, [pc, #76]	; (800075c <MX_DAC_Init+0x64>)
 8000710:	f002 f9a9 	bl	8002a66 <HAL_DAC_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_DAC_Init+0x26>
  {
    Error_Handler();
 800071a:	f000 f97d 	bl	8000a18 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	480b      	ldr	r0, [pc, #44]	; (800075c <MX_DAC_Init+0x64>)
 800072e:	f002 fa2c 	bl	8002b8a <HAL_DAC_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000738:	f000 f96e 	bl	8000a18 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2210      	movs	r2, #16
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <MX_DAC_Init+0x64>)
 8000744:	f002 fa21 	bl	8002b8a <HAL_DAC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_DAC_Init+0x5a>
  {
    Error_Handler();
 800074e:	f000 f963 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000f4 	.word	0x200000f4
 8000760:	40007400 	.word	0x40007400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077a:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <MX_GPIO_Init+0xc4>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a2a      	ldr	r2, [pc, #168]	; (8000828 <MX_GPIO_Init+0xc4>)
 8000780:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	4b28      	ldr	r3, [pc, #160]	; (8000828 <MX_GPIO_Init+0xc4>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <MX_GPIO_Init+0xc4>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a24      	ldr	r2, [pc, #144]	; (8000828 <MX_GPIO_Init+0xc4>)
 8000798:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b22      	ldr	r3, [pc, #136]	; (8000828 <MX_GPIO_Init+0xc4>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_GPIO_Init+0xc4>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a1e      	ldr	r2, [pc, #120]	; (8000828 <MX_GPIO_Init+0xc4>)
 80007b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b4:	6153      	str	r3, [r2, #20]
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_GPIO_Init+0xc4>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_GPIO_Init+0xc4>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <MX_GPIO_Init+0xc4>)
 80007c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_GPIO_Init+0xc4>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f640 0108 	movw	r1, #2056	; 0x808
 80007e0:	4812      	ldr	r0, [pc, #72]	; (800082c <MX_GPIO_Init+0xc8>)
 80007e2:	f002 fb99 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007e6:	2320      	movs	r3, #32
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ea:	2303      	movs	r3, #3
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f002 fa12 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_3;
 8000800:	f640 0308 	movw	r3, #2056	; 0x808
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_GPIO_Init+0xc8>)
 800081a:	f002 fa03 	bl	8002c24 <HAL_GPIO_Init>

}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	48000400 	.word	0x48000400

08000830 <sendCAN>:

/* USER CODE BEGIN 4 */


uint32_t sendCAN(uint16_t id, uint8_t buffer[], uint8_t len) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	80fb      	strh	r3, [r7, #6]
 800083c:	4613      	mov	r3, r2
 800083e:	717b      	strb	r3, [r7, #5]
	CAN_TxHeaderTypeDef header;

	header.IDE = CAN_ID_STD;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
	header.RTR = CAN_RTR_DATA;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
	header.TransmitGlobalTime = DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3020 	strb.w	r3, [r7, #32]
	header.DLC = len;
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	61fb      	str	r3, [r7, #28]
	header.StdId = id;
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	60fb      	str	r3, [r7, #12]

	uint32_t mailbox;
	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0) {
 8000856:	4817      	ldr	r0, [pc, #92]	; (80008b4 <sendCAN+0x84>)
 8000858:	f001 fe66 	bl	8002528 <HAL_CAN_GetTxMailboxesFreeLevel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d016      	beq.n	8000890 <sendCAN+0x60>
		uint8_t res = HAL_CAN_AddTxMessage(&hcan, &header, buffer, &mailbox);
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	f107 010c 	add.w	r1, r7, #12
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	4811      	ldr	r0, [pc, #68]	; (80008b4 <sendCAN+0x84>)
 800086e:	f001 fd80 	bl	8002372 <HAL_CAN_AddTxMessage>
 8000872:	4603      	mov	r3, r0
 8000874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res != HAL_OK) {
 8000878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800087c:	2b00      	cmp	r3, #0
 800087e:	d003      	beq.n	8000888 <sendCAN+0x58>
			state = FAULT_SEND;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <sendCAN+0x88>)
 8000882:	2202      	movs	r2, #2
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	e00f      	b.n	80008a8 <sendCAN+0x78>
		} else {
			state = NO_FAULT;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <sendCAN+0x88>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	e00b      	b.n	80008a8 <sendCAN+0x78>
		}
	} else {
		if (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)) {
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <sendCAN+0x8c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	4807      	ldr	r0, [pc, #28]	; (80008b4 <sendCAN+0x84>)
 8000898:	f001 fe7b 	bl	8002592 <HAL_CAN_IsTxMessagePending>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <sendCAN+0x78>
			state = FAULT_SEND;
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <sendCAN+0x88>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	701a      	strb	r2, [r3, #0]
		}
	}

	return mailbox;
 80008a8:	68bb      	ldr	r3, [r7, #8]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3728      	adds	r7, #40	; 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000cc 	.word	0x200000cc
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000108 	.word	0x20000108

080008c0 <CAN_RX_Interrupt>:

void CAN_RX_Interrupt(CAN_HandleTypeDef *hcan, int mailbox) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08e      	sub	sp, #56	; 0x38
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef tmp;
	uint8_t dat[8];
	HAL_CAN_GetRxMessage(hcan, mailbox, &tmp, dat);
 80008ca:	6839      	ldr	r1, [r7, #0]
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	f107 0210 	add.w	r2, r7, #16
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f001 fe80 	bl	80025da <HAL_CAN_GetRxMessage>
	int address = tmp.StdId;
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
	if (address == CAN_GAS_INPUT) {
 80008de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008e4:	d16b      	bne.n	80009be <CAN_RX_Interrupt+0xfe>
		uint16_t value_0 = (dat[0] << 8) | dat[1];
 80008e6:	7a3b      	ldrb	r3, [r7, #8]
 80008e8:	021b      	lsls	r3, r3, #8
 80008ea:	b21a      	sxth	r2, r3
 80008ec:	7a7b      	ldrb	r3, [r7, #9]
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	867b      	strh	r3, [r7, #50]	; 0x32
		uint16_t value_1 = (dat[2] << 8) | dat[3];
 80008f6:	7abb      	ldrb	r3, [r7, #10]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	7afb      	ldrb	r3, [r7, #11]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21b      	sxth	r3, r3
 8000904:	863b      	strh	r3, [r7, #48]	; 0x30
		uint8_t enable = ((dat[4] >> 7) & 1U) != 0U;
 8000906:	7b3b      	ldrb	r3, [r7, #12]
 8000908:	09db      	lsrs	r3, r3, #7
 800090a:	b2db      	uxtb	r3, r3
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	2b00      	cmp	r3, #0
 8000912:	bf14      	ite	ne
 8000914:	2301      	movne	r3, #1
 8000916:	2300      	moveq	r3, #0
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint8_t index = dat[4] & COUNTER_CYCLE;
 800091e:	7b3b      	ldrb	r3, [r7, #12]
 8000920:	f003 030f 	and.w	r3, r3, #15
 8000924:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if (crc_checksum(dat, CAN_GAS_SIZE - 1, crc_poly) == dat[5]) {
 8000928:	22d5      	movs	r2, #213	; 0xd5
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	2105      	movs	r1, #5
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fc49 	bl	80001c8 <crc_checksum>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	7b7b      	ldrb	r3, [r7, #13]
 800093c:	429a      	cmp	r2, r3
 800093e:	d13b      	bne.n	80009b8 <CAN_RX_Interrupt+0xf8>
			if (((current_index + 1U) & COUNTER_CYCLE) == index) {
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <CAN_RX_Interrupt+0x108>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	f003 020f 	and.w	r2, r3, #15
 800094a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800094e:	429a      	cmp	r2, r3
 8000950:	d127      	bne.n	80009a2 <CAN_RX_Interrupt+0xe2>
				LED_ON();
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <CAN_RX_Interrupt+0x10c>)
 800095a:	f002 fadd 	bl	8002f18 <HAL_GPIO_WritePin>
				if (enable) {
 800095e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000962:	2b00      	cmp	r3, #0
 8000964:	d006      	beq.n	8000974 <CAN_RX_Interrupt+0xb4>
					gas_set_0 = value_0;
 8000966:	4a1a      	ldr	r2, [pc, #104]	; (80009d0 <CAN_RX_Interrupt+0x110>)
 8000968:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800096a:	8013      	strh	r3, [r2, #0]
					gas_set_1 = value_1;
 800096c:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <CAN_RX_Interrupt+0x114>)
 800096e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000970:	8013      	strh	r3, [r2, #0]
 8000972:	e012      	b.n	800099a <CAN_RX_Interrupt+0xda>
				} else {
					// clear the fault state if values are 0
					if ((value_0 == 0U) && (value_1 == 0U)) {
 8000974:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000976:	2b00      	cmp	r3, #0
 8000978:	d106      	bne.n	8000988 <CAN_RX_Interrupt+0xc8>
 800097a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800097c:	2b00      	cmp	r3, #0
 800097e:	d103      	bne.n	8000988 <CAN_RX_Interrupt+0xc8>
						state = NO_FAULT;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <CAN_RX_Interrupt+0x118>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
 8000986:	e002      	b.n	800098e <CAN_RX_Interrupt+0xce>
					} else {
						state = FAULT_INVALID;
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <CAN_RX_Interrupt+0x118>)
 800098a:	2206      	movs	r2, #6
 800098c:	701a      	strb	r2, [r3, #0]
					}
					gas_set_0 = 0;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <CAN_RX_Interrupt+0x110>)
 8000990:	2200      	movs	r2, #0
 8000992:	801a      	strh	r2, [r3, #0]
					gas_set_1 = 0;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <CAN_RX_Interrupt+0x114>)
 8000996:	2200      	movs	r2, #0
 8000998:	801a      	strh	r2, [r3, #0]
				}
				timeout = 0;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <CAN_RX_Interrupt+0x11c>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	e005      	b.n	80009ae <CAN_RX_Interrupt+0xee>
			} else {
				LED_OFF();
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <CAN_RX_Interrupt+0x10c>)
 80009aa:	f002 fab5 	bl	8002f18 <HAL_GPIO_WritePin>
			}
			current_index = index;
 80009ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <CAN_RX_Interrupt+0x108>)
 80009b4:	6013      	str	r3, [r2, #0]
		} else {
			state = FAULT_BAD_CHECKSUM;
		}
	}
}
 80009b6:	e002      	b.n	80009be <CAN_RX_Interrupt+0xfe>
			state = FAULT_BAD_CHECKSUM;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <CAN_RX_Interrupt+0x118>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
}
 80009be:	bf00      	nop
 80009c0:	3738      	adds	r7, #56	; 0x38
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000013c 	.word	0x2000013c
 80009cc:	48000400 	.word	0x48000400
 80009d0:	20000134 	.word	0x20000134
 80009d4:	20000136 	.word	0x20000136
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000138 	.word	0x20000138

080009e0 <readCAN>:

void readCAN() {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0) {
 80009e4:	2100      	movs	r1, #0
 80009e6:	480b      	ldr	r0, [pc, #44]	; (8000a14 <readCAN+0x34>)
 80009e8:	f001 ff09 	bl	80027fe <HAL_CAN_GetRxFifoFillLevel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <readCAN+0x1a>
		CAN_RX_Interrupt(&hcan, CAN_RX_FIFO0);
 80009f2:	2100      	movs	r1, #0
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <readCAN+0x34>)
 80009f6:	f7ff ff63 	bl	80008c0 <CAN_RX_Interrupt>
	}
	if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO1) > 0) {
 80009fa:	2101      	movs	r1, #1
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <readCAN+0x34>)
 80009fe:	f001 fefe 	bl	80027fe <HAL_CAN_GetRxFifoFillLevel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d003      	beq.n	8000a10 <readCAN+0x30>
		CAN_RX_Interrupt(&hcan, CAN_RX_FIFO0);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4802      	ldr	r0, [pc, #8]	; (8000a14 <readCAN+0x34>)
 8000a0c:	f7ff ff58 	bl	80008c0 <CAN_RX_Interrupt>
	}
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000cc 	.word	0x200000cc

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_MspInit+0x44>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6193      	str	r3, [r2, #24]
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x44>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x44>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x44>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	61d3      	str	r3, [r2, #28]
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x44>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	; 0x30
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a8c:	d12d      	bne.n	8000aea <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a8e:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <HAL_ADC_MspInit+0xec>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a30      	ldr	r2, [pc, #192]	; (8000b58 <HAL_ADC_MspInit+0xec>)
 8000a96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a98:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <HAL_ADC_MspInit+0xec>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d10b      	bne.n	8000ab8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000aa0:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	4a2d      	ldr	r2, [pc, #180]	; (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6153      	str	r3, [r2, #20]
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	61bb      	str	r3, [r7, #24]
 8000ab6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	4a27      	ldr	r2, [pc, #156]	; (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000abe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ac2:	6153      	str	r3, [r2, #20]
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481f      	ldr	r0, [pc, #124]	; (8000b60 <HAL_ADC_MspInit+0xf4>)
 8000ae4:	f002 f89e 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ae8:	e031      	b.n	8000b4e <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <HAL_ADC_MspInit+0xf8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d12c      	bne.n	8000b4e <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_ADC_MspInit+0xec>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <HAL_ADC_MspInit+0xec>)
 8000afc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <HAL_ADC_MspInit+0xec>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d10b      	bne.n	8000b1e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6153      	str	r3, [r2, #20]
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b28:	6153      	str	r3, [r2, #20]
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <HAL_ADC_MspInit+0xf4>)
 8000b4a:	f002 f86b 	bl	8002c24 <HAL_GPIO_Init>
}
 8000b4e:	bf00      	nop
 8000b50:	3730      	adds	r7, #48	; 0x30
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000150 	.word	0x20000150
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	48000800 	.word	0x48000800
 8000b64:	50000100 	.word	0x50000100

08000b68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <HAL_CAN_MspInit+0x7c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d128      	bne.n	8000bdc <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_CAN_MspInit+0x80>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <HAL_CAN_MspInit+0x80>)
 8000b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_CAN_MspInit+0x80>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_CAN_MspInit+0x80>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <HAL_CAN_MspInit+0x80>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bac:	6153      	str	r3, [r2, #20]
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_CAN_MspInit+0x80>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000bcc:	2309      	movs	r3, #9
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_CAN_MspInit+0x84>)
 8000bd8:	f002 f824 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40006400 	.word	0x40006400
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48000400 	.word	0x48000400

08000bf0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <HAL_DAC_MspInit+0x74>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d124      	bne.n	8000c5c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_DAC_MspInit+0x78>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_DAC_MspInit+0x78>)
 8000c18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c1c:	61d3      	str	r3, [r2, #28]
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_DAC_MspInit+0x78>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_DAC_MspInit+0x78>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_DAC_MspInit+0x78>)
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	6153      	str	r3, [r2, #20]
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_DAC_MspInit+0x78>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c42:	2330      	movs	r3, #48	; 0x30
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f001 ffe4 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40007400 	.word	0x40007400
 8000c68:	40021000 	.word	0x40021000

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 f884 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cea:	490e      	ldr	r1, [pc, #56]	; (8000d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <LoopForever+0xe>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d00:	4c0b      	ldr	r4, [pc, #44]	; (8000d30 <LoopForever+0x16>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d0e:	f7ff ffd7 	bl	8000cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f003 fb43 	bl	800439c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d16:	f7ff fa91 	bl	800023c <main>

08000d1a <LoopForever>:

LoopForever:
    b LoopForever
 8000d1a:	e7fe      	b.n	8000d1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d1c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d28:	08004444 	.word	0x08004444
  ldr r2, =_sbss
 8000d2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d30:	20000158 	.word	0x20000158

08000d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_2_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_Init+0x28>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_Init+0x28>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f001 fe59 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	200f      	movs	r0, #15
 8000d50:	f000 f808 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff fe66 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40022000 	.word	0x40022000

08000d64 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x54>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x58>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fe63 	bl	8002a4e <HAL_SYSTICK_Config>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00e      	b.n	8000db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d80a      	bhi.n	8000dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da0:	f001 fe39 	bl	8002a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_InitTick+0x5c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000000c 	.word	0x2000000c
 8000de8:	20000154 	.word	0x20000154

08000dec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;  
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000154 	.word	0x20000154

08000e04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b09a      	sub	sp, #104	; 0x68
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e1c9      	b.n	80011b8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d176      	bne.n	8000f24 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d152      	bne.n	8000ee4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fe07 	bl	8000a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d13b      	bne.n	8000ee4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f001 f811 	bl	8001e94 <ADC_Disable>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d12f      	bne.n	8000ee4 <HAL_ADC_Init+0xe0>
 8000e84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d12b      	bne.n	8000ee4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e94:	f023 0302 	bic.w	r3, r3, #2
 8000e98:	f043 0202 	orr.w	r2, r3, #2
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000eae:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ebe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ec0:	4b86      	ldr	r3, [pc, #536]	; (80010dc <HAL_ADC_Init+0x2d8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a86      	ldr	r2, [pc, #536]	; (80010e0 <HAL_ADC_Init+0x2dc>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	0c9a      	lsrs	r2, r3, #18
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ed6:	e002      	b.n	8000ede <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f9      	bne.n	8000ed8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d007      	beq.n	8000f02 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f00:	d110      	bne.n	8000f24 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f023 0312 	bic.w	r3, r3, #18
 8000f0a:	f043 0210 	orr.w	r2, r3, #16
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f043 0201 	orr.w	r2, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f040 8136 	bne.w	800119e <HAL_ADC_Init+0x39a>
 8000f32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f040 8131 	bne.w	800119e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f040 8129 	bne.w	800119e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f54:	f043 0202 	orr.w	r2, r3, #2
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f64:	d004      	beq.n	8000f70 <HAL_ADC_Init+0x16c>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a5e      	ldr	r2, [pc, #376]	; (80010e4 <HAL_ADC_Init+0x2e0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d101      	bne.n	8000f74 <HAL_ADC_Init+0x170>
 8000f70:	4b5d      	ldr	r3, [pc, #372]	; (80010e8 <HAL_ADC_Init+0x2e4>)
 8000f72:	e000      	b.n	8000f76 <HAL_ADC_Init+0x172>
 8000f74:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <HAL_ADC_Init+0x2e8>)
 8000f76:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f80:	d102      	bne.n	8000f88 <HAL_ADC_Init+0x184>
 8000f82:	4b58      	ldr	r3, [pc, #352]	; (80010e4 <HAL_ADC_Init+0x2e0>)
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	e01a      	b.n	8000fbe <HAL_ADC_Init+0x1ba>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a55      	ldr	r2, [pc, #340]	; (80010e4 <HAL_ADC_Init+0x2e0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d103      	bne.n	8000f9a <HAL_ADC_Init+0x196>
 8000f92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e011      	b.n	8000fbe <HAL_ADC_Init+0x1ba>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a54      	ldr	r2, [pc, #336]	; (80010f0 <HAL_ADC_Init+0x2ec>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d102      	bne.n	8000faa <HAL_ADC_Init+0x1a6>
 8000fa4:	4b53      	ldr	r3, [pc, #332]	; (80010f4 <HAL_ADC_Init+0x2f0>)
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	e009      	b.n	8000fbe <HAL_ADC_Init+0x1ba>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a51      	ldr	r2, [pc, #324]	; (80010f4 <HAL_ADC_Init+0x2f0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d102      	bne.n	8000fba <HAL_ADC_Init+0x1b6>
 8000fb4:	4b4e      	ldr	r3, [pc, #312]	; (80010f0 <HAL_ADC_Init+0x2ec>)
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e001      	b.n	8000fbe <HAL_ADC_Init+0x1ba>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d108      	bne.n	8000fde <HAL_ADC_Init+0x1da>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d101      	bne.n	8000fde <HAL_ADC_Init+0x1da>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_ADC_Init+0x1dc>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d11c      	bne.n	800101e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d010      	beq.n	800100c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d107      	bne.n	8001006 <HAL_ADC_Init+0x202>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d101      	bne.n	8001006 <HAL_ADC_Init+0x202>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <HAL_ADC_Init+0x204>
 8001006:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001008:	2b00      	cmp	r3, #0
 800100a:	d108      	bne.n	800101e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800100c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	431a      	orrs	r2, r3
 800101a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800101c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7e5b      	ldrb	r3, [r3, #25]
 8001022:	035b      	lsls	r3, r3, #13
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001028:	2a01      	cmp	r2, #1
 800102a:	d002      	beq.n	8001032 <HAL_ADC_Init+0x22e>
 800102c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001030:	e000      	b.n	8001034 <HAL_ADC_Init+0x230>
 8001032:	2200      	movs	r2, #0
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	4313      	orrs	r3, r2
 8001042:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001044:	4313      	orrs	r3, r2
 8001046:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d11b      	bne.n	800108a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7e5b      	ldrb	r3, [r3, #25]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d109      	bne.n	800106e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	3b01      	subs	r3, #1
 8001060:	045a      	lsls	r2, r3, #17
 8001062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001064:	4313      	orrs	r3, r2
 8001066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106a:	663b      	str	r3, [r7, #96]	; 0x60
 800106c:	e00d      	b.n	800108a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001076:	f043 0220 	orr.w	r2, r3, #32
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f043 0201 	orr.w	r2, r3, #1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108e:	2b01      	cmp	r3, #1
 8001090:	d03a      	beq.n	8001108 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a16      	ldr	r2, [pc, #88]	; (80010f0 <HAL_ADC_Init+0x2ec>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d004      	beq.n	80010a6 <HAL_ADC_Init+0x2a2>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <HAL_ADC_Init+0x2f0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d128      	bne.n	80010f8 <HAL_ADC_Init+0x2f4>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80010ae:	d012      	beq.n	80010d6 <HAL_ADC_Init+0x2d2>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010b8:	d00a      	beq.n	80010d0 <HAL_ADC_Init+0x2cc>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010be:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80010c2:	d002      	beq.n	80010ca <HAL_ADC_Init+0x2c6>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	e018      	b.n	80010fc <HAL_ADC_Init+0x2f8>
 80010ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ce:	e015      	b.n	80010fc <HAL_ADC_Init+0x2f8>
 80010d0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80010d4:	e012      	b.n	80010fc <HAL_ADC_Init+0x2f8>
 80010d6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80010da:	e00f      	b.n	80010fc <HAL_ADC_Init+0x2f8>
 80010dc:	20000004 	.word	0x20000004
 80010e0:	431bde83 	.word	0x431bde83
 80010e4:	50000100 	.word	0x50000100
 80010e8:	50000300 	.word	0x50000300
 80010ec:	50000700 	.word	0x50000700
 80010f0:	50000400 	.word	0x50000400
 80010f4:	50000500 	.word	0x50000500
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001100:	4313      	orrs	r3, r2
 8001102:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001104:	4313      	orrs	r3, r2
 8001106:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	2b00      	cmp	r3, #0
 8001114:	d114      	bne.n	8001140 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001124:	f023 0302 	bic.w	r3, r3, #2
 8001128:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7e1b      	ldrb	r3, [r3, #24]
 800112e:	039a      	lsls	r2, r3, #14
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4313      	orrs	r3, r2
 800113a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800113c:	4313      	orrs	r3, r2
 800113e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <HAL_ADC_Init+0x3bc>)
 8001148:	4013      	ands	r3, r2
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001150:	430b      	orrs	r3, r1
 8001152:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d10c      	bne.n	8001176 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f023 010f 	bic.w	r1, r3, #15
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	1e5a      	subs	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	631a      	str	r2, [r3, #48]	; 0x30
 8001174:	e007      	b.n	8001186 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 020f 	bic.w	r2, r2, #15
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f023 0303 	bic.w	r3, r3, #3
 8001194:	f043 0201 	orr.w	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	641a      	str	r2, [r3, #64]	; 0x40
 800119c:	e00a      	b.n	80011b4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f023 0312 	bic.w	r3, r3, #18
 80011a6:	f043 0210 	orr.w	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80011ae:	2301      	movs	r3, #1
 80011b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80011b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3768      	adds	r7, #104	; 0x68
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	fff0c007 	.word	0xfff0c007

080011c4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 80f9 	bne.w	80013d2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d101      	bne.n	80011ee <HAL_ADC_Start+0x2a>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e0f4      	b.n	80013d8 <HAL_ADC_Start+0x214>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fde8 	bl	8001dcc <ADC_Enable>
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	f040 80e0 	bne.w	80013c8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001210:	f023 0301 	bic.w	r3, r3, #1
 8001214:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001224:	d004      	beq.n	8001230 <HAL_ADC_Start+0x6c>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a6d      	ldr	r2, [pc, #436]	; (80013e0 <HAL_ADC_Start+0x21c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d106      	bne.n	800123e <HAL_ADC_Start+0x7a>
 8001230:	4b6c      	ldr	r3, [pc, #432]	; (80013e4 <HAL_ADC_Start+0x220>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	2b00      	cmp	r3, #0
 800123a:	d010      	beq.n	800125e <HAL_ADC_Start+0x9a>
 800123c:	e005      	b.n	800124a <HAL_ADC_Start+0x86>
 800123e:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <HAL_ADC_Start+0x224>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <HAL_ADC_Start+0x9a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001252:	d004      	beq.n	800125e <HAL_ADC_Start+0x9a>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a64      	ldr	r2, [pc, #400]	; (80013ec <HAL_ADC_Start+0x228>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d115      	bne.n	800128a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d036      	beq.n	80012e6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001280:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001288:	e02d      	b.n	80012e6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129e:	d004      	beq.n	80012aa <HAL_ADC_Start+0xe6>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a4e      	ldr	r2, [pc, #312]	; (80013e0 <HAL_ADC_Start+0x21c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10a      	bne.n	80012c0 <HAL_ADC_Start+0xfc>
 80012aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf14      	ite	ne
 80012b8:	2301      	movne	r3, #1
 80012ba:	2300      	moveq	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	e008      	b.n	80012d2 <HAL_ADC_Start+0x10e>
 80012c0:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <HAL_ADC_Start+0x228>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf14      	ite	ne
 80012cc:	2301      	movne	r3, #1
 80012ce:	2300      	moveq	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012f2:	d106      	bne.n	8001302 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	f023 0206 	bic.w	r2, r3, #6
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001300:	e002      	b.n	8001308 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	221c      	movs	r2, #28
 8001316:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001320:	d004      	beq.n	800132c <HAL_ADC_Start+0x168>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a2e      	ldr	r2, [pc, #184]	; (80013e0 <HAL_ADC_Start+0x21c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d106      	bne.n	800133a <HAL_ADC_Start+0x176>
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <HAL_ADC_Start+0x220>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	2b00      	cmp	r3, #0
 8001336:	d03e      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 8001338:	e005      	b.n	8001346 <HAL_ADC_Start+0x182>
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <HAL_ADC_Start+0x224>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	2b00      	cmp	r3, #0
 8001344:	d037      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800134e:	d004      	beq.n	800135a <HAL_ADC_Start+0x196>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_ADC_Start+0x21c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d106      	bne.n	8001368 <HAL_ADC_Start+0x1a4>
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <HAL_ADC_Start+0x220>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	2b05      	cmp	r3, #5
 8001364:	d027      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 8001366:	e005      	b.n	8001374 <HAL_ADC_Start+0x1b0>
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <HAL_ADC_Start+0x224>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 031f 	and.w	r3, r3, #31
 8001370:	2b05      	cmp	r3, #5
 8001372:	d020      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800137c:	d004      	beq.n	8001388 <HAL_ADC_Start+0x1c4>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_ADC_Start+0x21c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d106      	bne.n	8001396 <HAL_ADC_Start+0x1d2>
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_ADC_Start+0x220>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	2b09      	cmp	r3, #9
 8001392:	d010      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 8001394:	e005      	b.n	80013a2 <HAL_ADC_Start+0x1de>
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_ADC_Start+0x224>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	2b09      	cmp	r3, #9
 80013a0:	d009      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013aa:	d004      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_ADC_Start+0x228>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d10f      	bne.n	80013d6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0204 	orr.w	r2, r2, #4
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	e006      	b.n	80013d6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80013d0:	e001      	b.n	80013d6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013d2:	2302      	movs	r3, #2
 80013d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	50000100 	.word	0x50000100
 80013e4:	50000300 	.word	0x50000300
 80013e8:	50000700 	.word	0x50000700
 80013ec:	50000400 	.word	0x50000400

080013f0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	2b08      	cmp	r3, #8
 8001404:	d102      	bne.n	800140c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001406:	2308      	movs	r3, #8
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e03a      	b.n	8001482 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001414:	d004      	beq.n	8001420 <HAL_ADC_PollForConversion+0x30>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a72      	ldr	r2, [pc, #456]	; (80015e4 <HAL_ADC_PollForConversion+0x1f4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d101      	bne.n	8001424 <HAL_ADC_PollForConversion+0x34>
 8001420:	4b71      	ldr	r3, [pc, #452]	; (80015e8 <HAL_ADC_PollForConversion+0x1f8>)
 8001422:	e000      	b.n	8001426 <HAL_ADC_PollForConversion+0x36>
 8001424:	4b71      	ldr	r3, [pc, #452]	; (80015ec <HAL_ADC_PollForConversion+0x1fc>)
 8001426:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	2b00      	cmp	r3, #0
 8001432:	d112      	bne.n	800145a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b01      	cmp	r3, #1
 8001440:	d11d      	bne.n	800147e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f043 0220 	orr.w	r2, r3, #32
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e0bf      	b.n	80015da <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f043 0220 	orr.w	r2, r3, #32
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0ad      	b.n	80015da <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800147e:	230c      	movs	r3, #12
 8001480:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800148a:	d004      	beq.n	8001496 <HAL_ADC_PollForConversion+0xa6>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a54      	ldr	r2, [pc, #336]	; (80015e4 <HAL_ADC_PollForConversion+0x1f4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d106      	bne.n	80014a4 <HAL_ADC_PollForConversion+0xb4>
 8001496:	4b54      	ldr	r3, [pc, #336]	; (80015e8 <HAL_ADC_PollForConversion+0x1f8>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 031f 	and.w	r3, r3, #31
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d010      	beq.n	80014c4 <HAL_ADC_PollForConversion+0xd4>
 80014a2:	e005      	b.n	80014b0 <HAL_ADC_PollForConversion+0xc0>
 80014a4:	4b51      	ldr	r3, [pc, #324]	; (80015ec <HAL_ADC_PollForConversion+0x1fc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <HAL_ADC_PollForConversion+0xd4>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014b8:	d004      	beq.n	80014c4 <HAL_ADC_PollForConversion+0xd4>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a4c      	ldr	r2, [pc, #304]	; (80015f0 <HAL_ADC_PollForConversion+0x200>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d104      	bne.n	80014ce <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	e00f      	b.n	80014ee <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014d6:	d004      	beq.n	80014e2 <HAL_ADC_PollForConversion+0xf2>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a41      	ldr	r2, [pc, #260]	; (80015e4 <HAL_ADC_PollForConversion+0x1f4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d102      	bne.n	80014e8 <HAL_ADC_PollForConversion+0xf8>
 80014e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014e6:	e000      	b.n	80014ea <HAL_ADC_PollForConversion+0xfa>
 80014e8:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <HAL_ADC_PollForConversion+0x200>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80014ee:	f7ff fc7d 	bl	8000dec <HAL_GetTick>
 80014f2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014f4:	e021      	b.n	800153a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014fc:	d01d      	beq.n	800153a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <HAL_ADC_PollForConversion+0x124>
 8001504:	f7ff fc72 	bl	8000dec <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d212      	bcs.n	800153a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10b      	bne.n	800153a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f043 0204 	orr.w	r2, r3, #4
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e04f      	b.n	80015da <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0d6      	beq.n	80014f6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800155e:	2b00      	cmp	r3, #0
 8001560:	d131      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001568:	2b00      	cmp	r3, #0
 800156a:	d12c      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b08      	cmp	r3, #8
 8001578:	d125      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d112      	bne.n	80015ae <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d112      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40
 80015ac:	e00b      	b.n	80015c6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f043 0220 	orr.w	r2, r3, #32
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d103      	bne.n	80015d8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	50000100 	.word	0x50000100
 80015e8:	50000300 	.word	0x50000300
 80015ec:	50000700 	.word	0x50000700
 80015f0:	50000400 	.word	0x50000400

080015f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001610:	b480      	push	{r7}
 8001612:	b09b      	sub	sp, #108	; 0x6c
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x22>
 800162e:	2302      	movs	r3, #2
 8001630:	e2ca      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x5b8>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	f040 82ae 	bne.w	8001ba6 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b04      	cmp	r3, #4
 8001650:	d81c      	bhi.n	800168c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	461a      	mov	r2, r3
 8001666:	231f      	movs	r3, #31
 8001668:	4093      	lsls	r3, r2
 800166a:	43db      	mvns	r3, r3
 800166c:	4019      	ands	r1, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	fa00 f203 	lsl.w	r2, r0, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
 800168a:	e063      	b.n	8001754 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b09      	cmp	r3, #9
 8001692:	d81e      	bhi.n	80016d2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	3b1e      	subs	r3, #30
 80016a8:	221f      	movs	r2, #31
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	4019      	ands	r1, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	3b1e      	subs	r3, #30
 80016c4:	fa00 f203 	lsl.w	r2, r0, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
 80016d0:	e040      	b.n	8001754 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b0e      	cmp	r3, #14
 80016d8:	d81e      	bhi.n	8001718 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	3b3c      	subs	r3, #60	; 0x3c
 80016ee:	221f      	movs	r2, #31
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	4019      	ands	r1, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	3b3c      	subs	r3, #60	; 0x3c
 800170a:	fa00 f203 	lsl.w	r2, r0, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	639a      	str	r2, [r3, #56]	; 0x38
 8001716:	e01d      	b.n	8001754 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	3b5a      	subs	r3, #90	; 0x5a
 800172c:	221f      	movs	r2, #31
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	4019      	ands	r1, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	3b5a      	subs	r3, #90	; 0x5a
 8001748:	fa00 f203 	lsl.w	r2, r0, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b00      	cmp	r3, #0
 8001760:	f040 80e5 	bne.w	800192e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b09      	cmp	r3, #9
 800176a:	d91c      	bls.n	80017a6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6999      	ldr	r1, [r3, #24]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	3b1e      	subs	r3, #30
 800177e:	2207      	movs	r2, #7
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	4019      	ands	r1, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6898      	ldr	r0, [r3, #8]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	3b1e      	subs	r3, #30
 8001798:	fa00 f203 	lsl.w	r2, r0, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	619a      	str	r2, [r3, #24]
 80017a4:	e019      	b.n	80017da <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6959      	ldr	r1, [r3, #20]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	2207      	movs	r2, #7
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	4019      	ands	r1, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6898      	ldr	r0, [r3, #8]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	fa00 f203 	lsl.w	r2, r0, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	08db      	lsrs	r3, r3, #3
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d84f      	bhi.n	800189c <HAL_ADC_ConfigChannel+0x28c>
 80017fc:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <HAL_ADC_ConfigChannel+0x1f4>)
 80017fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001802:	bf00      	nop
 8001804:	08001815 	.word	0x08001815
 8001808:	08001837 	.word	0x08001837
 800180c:	08001859 	.word	0x08001859
 8001810:	0800187b 	.word	0x0800187b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800181a:	4b9a      	ldr	r3, [pc, #616]	; (8001a84 <HAL_ADC_ConfigChannel+0x474>)
 800181c:	4013      	ands	r3, r2
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	0691      	lsls	r1, r2, #26
 8001824:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001826:	430a      	orrs	r2, r1
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001832:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001834:	e07e      	b.n	8001934 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800183c:	4b91      	ldr	r3, [pc, #580]	; (8001a84 <HAL_ADC_ConfigChannel+0x474>)
 800183e:	4013      	ands	r3, r2
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	0691      	lsls	r1, r2, #26
 8001846:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001848:	430a      	orrs	r2, r1
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001854:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001856:	e06d      	b.n	8001934 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800185e:	4b89      	ldr	r3, [pc, #548]	; (8001a84 <HAL_ADC_ConfigChannel+0x474>)
 8001860:	4013      	ands	r3, r2
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	0691      	lsls	r1, r2, #26
 8001868:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800186a:	430a      	orrs	r2, r1
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001876:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001878:	e05c      	b.n	8001934 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001880:	4b80      	ldr	r3, [pc, #512]	; (8001a84 <HAL_ADC_ConfigChannel+0x474>)
 8001882:	4013      	ands	r3, r2
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	0691      	lsls	r1, r2, #26
 800188a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800188c:	430a      	orrs	r2, r1
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001898:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800189a:	e04b      	b.n	8001934 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	069b      	lsls	r3, r3, #26
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d107      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018be:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	069b      	lsls	r3, r3, #26
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d107      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018e2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	069b      	lsls	r3, r3, #26
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d107      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001906:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800190e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	069b      	lsls	r3, r3, #26
 8001918:	429a      	cmp	r2, r3
 800191a:	d10a      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800192a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800192c:	e001      	b.n	8001932 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800192e:	bf00      	nop
 8001930:	e000      	b.n	8001934 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001932:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d108      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x344>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x344>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_ADC_ConfigChannel+0x346>
 8001954:	2300      	movs	r3, #0
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 8130 	bne.w	8001bbc <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d00f      	beq.n	8001984 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2201      	movs	r2, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	400a      	ands	r2, r1
 800197e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001982:	e049      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	409a      	lsls	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b09      	cmp	r3, #9
 80019a4:	d91c      	bls.n	80019e0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6999      	ldr	r1, [r3, #24]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	3b1b      	subs	r3, #27
 80019b8:	2207      	movs	r2, #7
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	4019      	ands	r1, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	6898      	ldr	r0, [r3, #8]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	3b1b      	subs	r3, #27
 80019d2:	fa00 f203 	lsl.w	r2, r0, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	619a      	str	r2, [r3, #24]
 80019de:	e01b      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6959      	ldr	r1, [r3, #20]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	2207      	movs	r2, #7
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4019      	ands	r1, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	6898      	ldr	r0, [r3, #8]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a20:	d004      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0x41c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a18      	ldr	r2, [pc, #96]	; (8001a88 <HAL_ADC_ConfigChannel+0x478>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x420>
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_ADC_ConfigChannel+0x47c>)
 8001a2e:	e000      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x422>
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_ADC_ConfigChannel+0x480>)
 8001a32:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b10      	cmp	r3, #16
 8001a3a:	d105      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d015      	beq.n	8001a74 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a4c:	2b11      	cmp	r3, #17
 8001a4e:	d105      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00b      	beq.n	8001a74 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a60:	2b12      	cmp	r3, #18
 8001a62:	f040 80ab 	bne.w	8001bbc <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 80a4 	bne.w	8001bbc <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a7c:	d10a      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x484>
 8001a7e:	4b02      	ldr	r3, [pc, #8]	; (8001a88 <HAL_ADC_ConfigChannel+0x478>)
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	e022      	b.n	8001aca <HAL_ADC_ConfigChannel+0x4ba>
 8001a84:	83fff000 	.word	0x83fff000
 8001a88:	50000100 	.word	0x50000100
 8001a8c:	50000300 	.word	0x50000300
 8001a90:	50000700 	.word	0x50000700
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a4e      	ldr	r2, [pc, #312]	; (8001bd4 <HAL_ADC_ConfigChannel+0x5c4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d103      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x496>
 8001a9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	e011      	b.n	8001aca <HAL_ADC_ConfigChannel+0x4ba>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a4b      	ldr	r2, [pc, #300]	; (8001bd8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d102      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x4a6>
 8001ab0:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <HAL_ADC_ConfigChannel+0x5cc>)
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	e009      	b.n	8001aca <HAL_ADC_ConfigChannel+0x4ba>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a48      	ldr	r2, [pc, #288]	; (8001bdc <HAL_ADC_ConfigChannel+0x5cc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d102      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x4b6>
 8001ac0:	4b45      	ldr	r3, [pc, #276]	; (8001bd8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e001      	b.n	8001aca <HAL_ADC_ConfigChannel+0x4ba>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d108      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x4da>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x4da>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_ADC_ConfigChannel+0x4dc>
 8001aea:	2300      	movs	r3, #0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d150      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001af0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d010      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d107      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x502>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x502>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x504>
 8001b12:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d13c      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b10      	cmp	r3, #16
 8001b1e:	d11d      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x54c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b28:	d118      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b34:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b36:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a2a      	ldr	r2, [pc, #168]	; (8001be4 <HAL_ADC_ConfigChannel+0x5d4>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	0c9a      	lsrs	r2, r3, #18
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b4c:	e002      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f9      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b5a:	e02e      	b.n	8001bba <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b11      	cmp	r3, #17
 8001b62:	d10b      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x56c>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b6c:	d106      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b78:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b7a:	e01e      	b.n	8001bba <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b12      	cmp	r3, #18
 8001b82:	d11a      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b8e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b90:	e013      	b.n	8001bba <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f043 0220 	orr.w	r2, r3, #32
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ba4:	e00a      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f043 0220 	orr.w	r2, r3, #32
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001bb8:	e000      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bba:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001bc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	376c      	adds	r7, #108	; 0x6c
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	50000100 	.word	0x50000100
 8001bd8:	50000400 	.word	0x50000400
 8001bdc:	50000500 	.word	0x50000500
 8001be0:	20000004 	.word	0x20000004
 8001be4:	431bde83 	.word	0x431bde83

08001be8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b099      	sub	sp, #100	; 0x64
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c00:	d102      	bne.n	8001c08 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001c02:	4b6d      	ldr	r3, [pc, #436]	; (8001db8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	e01a      	b.n	8001c3e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a6a      	ldr	r2, [pc, #424]	; (8001db8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d103      	bne.n	8001c1a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001c12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	e011      	b.n	8001c3e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a67      	ldr	r2, [pc, #412]	; (8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d102      	bne.n	8001c2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c24:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	e009      	b.n	8001c3e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a64      	ldr	r2, [pc, #400]	; (8001dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d102      	bne.n	8001c3a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001c34:	4b61      	ldr	r3, [pc, #388]	; (8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	e001      	b.n	8001c3e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0b0      	b.n	8001daa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e0a9      	b.n	8001daa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f040 808d 	bne.w	8001d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 8086 	bne.w	8001d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c84:	d004      	beq.n	8001c90 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a4b      	ldr	r2, [pc, #300]	; (8001db8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001c90:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001c92:	e000      	b.n	8001c96 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001c94:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001c96:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d040      	beq.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	6859      	ldr	r1, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cb2:	035b      	lsls	r3, r3, #13
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cba:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d108      	bne.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d15c      	bne.n	8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001cfe:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d14b      	bne.n	8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d0c:	f023 030f 	bic.w	r3, r3, #15
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	6811      	ldr	r1, [r2, #0]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	6892      	ldr	r2, [r2, #8]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d1e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d20:	e03c      	b.n	8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d2c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d108      	bne.n	8001d4e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d123      	bne.n	8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d107      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001d70:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d112      	bne.n	8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001d76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d7e:	f023 030f 	bic.w	r3, r3, #15
 8001d82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d84:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d86:	e009      	b.n	8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f043 0220 	orr.w	r2, r3, #32
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d9a:	e000      	b.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d9c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001da6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001daa:	4618      	mov	r0, r3
 8001dac:	3764      	adds	r7, #100	; 0x64
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	50000100 	.word	0x50000100
 8001dbc:	50000400 	.word	0x50000400
 8001dc0:	50000500 	.word	0x50000500
 8001dc4:	50000300 	.word	0x50000300
 8001dc8:	50000700 	.word	0x50000700

08001dcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d108      	bne.n	8001df8 <ADC_Enable+0x2c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <ADC_Enable+0x2c>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <ADC_Enable+0x2e>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d143      	bne.n	8001e86 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <ADC_Enable+0xc4>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00d      	beq.n	8001e28 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f043 0210 	orr.w	r2, r3, #16
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	f043 0201 	orr.w	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e02f      	b.n	8001e88 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001e38:	f7fe ffd8 	bl	8000dec <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e3e:	e01b      	b.n	8001e78 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e40:	f7fe ffd4 	bl	8000dec <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d914      	bls.n	8001e78 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d00d      	beq.n	8001e78 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f043 0210 	orr.w	r2, r3, #16
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e007      	b.n	8001e88 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d1dc      	bne.n	8001e40 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	8000003f 	.word	0x8000003f

08001e94 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <ADC_Disable+0x2c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <ADC_Disable+0x2c>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <ADC_Disable+0x2e>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d047      	beq.n	8001f56 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 030d 	and.w	r3, r3, #13
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d10f      	bne.n	8001ef4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0202 	orr.w	r2, r2, #2
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2203      	movs	r2, #3
 8001eea:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001eec:	f7fe ff7e 	bl	8000dec <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ef2:	e029      	b.n	8001f48 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f043 0210 	orr.w	r2, r3, #16
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f043 0201 	orr.w	r2, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e023      	b.n	8001f58 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f10:	f7fe ff6c 	bl	8000dec <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d914      	bls.n	8001f48 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d10d      	bne.n	8001f48 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f043 0210 	orr.w	r2, r3, #16
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e007      	b.n	8001f58 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d0dc      	beq.n	8001f10 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0ed      	b.n	800214e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe fdf2 	bl	8000b68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f94:	f7fe ff2a 	bl	8000dec <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f9a:	e012      	b.n	8001fc2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f9c:	f7fe ff26 	bl	8000dec <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b0a      	cmp	r3, #10
 8001fa8:	d90b      	bls.n	8001fc2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2205      	movs	r2, #5
 8001fba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0c5      	b.n	800214e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0e5      	beq.n	8001f9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0202 	bic.w	r2, r2, #2
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fe0:	f7fe ff04 	bl	8000dec <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fe6:	e012      	b.n	800200e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fe8:	f7fe ff00 	bl	8000dec <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b0a      	cmp	r3, #10
 8001ff4:	d90b      	bls.n	800200e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2205      	movs	r2, #5
 8002006:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e09f      	b.n	800214e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e5      	bne.n	8001fe8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	7e1b      	ldrb	r3, [r3, #24]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d108      	bne.n	8002036 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e007      	b.n	8002046 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002044:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7e5b      	ldrb	r3, [r3, #25]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d108      	bne.n	8002060 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e007      	b.n	8002070 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800206e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7e9b      	ldrb	r3, [r3, #26]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d108      	bne.n	800208a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0220 	orr.w	r2, r2, #32
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e007      	b.n	800209a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0220 	bic.w	r2, r2, #32
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7edb      	ldrb	r3, [r3, #27]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0210 	bic.w	r2, r2, #16
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	e007      	b.n	80020c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0210 	orr.w	r2, r2, #16
 80020c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7f1b      	ldrb	r3, [r3, #28]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d108      	bne.n	80020de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0208 	orr.w	r2, r2, #8
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e007      	b.n	80020ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0208 	bic.w	r2, r2, #8
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7f5b      	ldrb	r3, [r3, #29]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d108      	bne.n	8002108 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0204 	orr.w	r2, r2, #4
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e007      	b.n	8002118 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0204 	bic.w	r2, r2, #4
 8002116:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	ea42 0103 	orr.w	r1, r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	1e5a      	subs	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002156:	b480      	push	{r7}
 8002158:	b087      	sub	sp, #28
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d003      	beq.n	800217c <HAL_CAN_ConfigFilter+0x26>
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	2b02      	cmp	r3, #2
 8002178:	f040 80aa 	bne.w	80022d0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2201      	movs	r2, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d123      	bne.n	80021fe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	43db      	mvns	r3, r3
 80021c0:	401a      	ands	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80021d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3248      	adds	r2, #72	; 0x48
 80021de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021f4:	6979      	ldr	r1, [r7, #20]
 80021f6:	3348      	adds	r3, #72	; 0x48
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	440b      	add	r3, r1
 80021fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d122      	bne.n	800224c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	431a      	orrs	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002226:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3248      	adds	r2, #72	; 0x48
 800222c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002240:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002242:	6979      	ldr	r1, [r7, #20]
 8002244:	3348      	adds	r3, #72	; 0x48
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43db      	mvns	r3, r3
 800225e:	401a      	ands	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002266:	e007      	b.n	8002278 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	431a      	orrs	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d109      	bne.n	8002294 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	43db      	mvns	r3, r3
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002292:	e007      	b.n	80022a4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	431a      	orrs	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d107      	bne.n	80022bc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022c2:	f023 0201 	bic.w	r2, r3, #1
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e006      	b.n	80022de <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
  }
}
 80022de:	4618      	mov	r0, r3
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d12e      	bne.n	800235c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002316:	f7fe fd69 	bl	8000dec <HAL_GetTick>
 800231a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800231c:	e012      	b.n	8002344 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800231e:	f7fe fd65 	bl	8000dec <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b0a      	cmp	r3, #10
 800232a:	d90b      	bls.n	8002344 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2205      	movs	r2, #5
 800233c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e012      	b.n	800236a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1e5      	bne.n	800231e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e006      	b.n	800236a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
  }
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002372:	b480      	push	{r7}
 8002374:	b089      	sub	sp, #36	; 0x24
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002386:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002390:	7ffb      	ldrb	r3, [r7, #31]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d003      	beq.n	800239e <HAL_CAN_AddTxMessage+0x2c>
 8002396:	7ffb      	ldrb	r3, [r7, #31]
 8002398:	2b02      	cmp	r3, #2
 800239a:	f040 80b8 	bne.w	800250e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a0 	beq.w	80024fe <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	0e1b      	lsrs	r3, r3, #24
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d907      	bls.n	80023de <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e09e      	b.n	800251c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80023de:	2201      	movs	r2, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10d      	bne.n	800240c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023fa:	68f9      	ldr	r1, [r7, #12]
 80023fc:	6809      	ldr	r1, [r1, #0]
 80023fe:	431a      	orrs	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3318      	adds	r3, #24
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	440b      	add	r3, r1
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e00f      	b.n	800242c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002416:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002420:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3318      	adds	r3, #24
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	440b      	add	r3, r1
 800242a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6819      	ldr	r1, [r3, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3318      	adds	r3, #24
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	440b      	add	r3, r1
 800243c:	3304      	adds	r3, #4
 800243e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	7d1b      	ldrb	r3, [r3, #20]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d111      	bne.n	800246c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3318      	adds	r3, #24
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	4413      	add	r3, r2
 8002454:	3304      	adds	r3, #4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	6811      	ldr	r1, [r2, #0]
 800245c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3318      	adds	r3, #24
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	440b      	add	r3, r1
 8002468:	3304      	adds	r3, #4
 800246a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3307      	adds	r3, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	061a      	lsls	r2, r3, #24
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3306      	adds	r3, #6
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3305      	adds	r3, #5
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	4313      	orrs	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	3204      	adds	r2, #4
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	4610      	mov	r0, r2
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	6811      	ldr	r1, [r2, #0]
 8002494:	ea43 0200 	orr.w	r2, r3, r0
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	440b      	add	r3, r1
 800249e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80024a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3303      	adds	r3, #3
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	061a      	lsls	r2, r3, #24
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3302      	adds	r3, #2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	041b      	lsls	r3, r3, #16
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3301      	adds	r3, #1
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	4313      	orrs	r3, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	7812      	ldrb	r2, [r2, #0]
 80024c4:	4610      	mov	r0, r2
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	6811      	ldr	r1, [r2, #0]
 80024ca:	ea43 0200 	orr.w	r2, r3, r0
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	440b      	add	r3, r1
 80024d4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80024d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	3318      	adds	r3, #24
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	4413      	add	r3, r2
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	6811      	ldr	r1, [r2, #0]
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3318      	adds	r3, #24
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	440b      	add	r3, r1
 80024f8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e00e      	b.n	800251c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e006      	b.n	800251c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3724      	adds	r7, #36	; 0x24
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800253c:	7afb      	ldrb	r3, [r7, #11]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d002      	beq.n	8002548 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002542:	7afb      	ldrb	r3, [r7, #11]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d11d      	bne.n	8002584 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3301      	adds	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3301      	adds	r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3301      	adds	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002584:	68fb      	ldr	r3, [r7, #12]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80025a8:	7afb      	ldrb	r3, [r7, #11]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d002      	beq.n	80025b4 <HAL_CAN_IsTxMessagePending+0x22>
 80025ae:	7afb      	ldrb	r3, [r7, #11]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d10b      	bne.n	80025cc <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	069b      	lsls	r3, r3, #26
 80025be:	401a      	ands	r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80025c8:	2301      	movs	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80025cc:	68fb      	ldr	r3, [r7, #12]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80025da:	b480      	push	{r7}
 80025dc:	b087      	sub	sp, #28
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d003      	beq.n	80025fe <HAL_CAN_GetRxMessage+0x24>
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	f040 80f3 	bne.w	80027e4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10e      	bne.n	8002622 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d116      	bne.n	8002640 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e0e7      	b.n	80027f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d107      	bne.n	8002640 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0d8      	b.n	80027f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	331b      	adds	r3, #27
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	4413      	add	r3, r2
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0204 	and.w	r2, r3, #4
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	331b      	adds	r3, #27
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	4413      	add	r3, r2
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0d5b      	lsrs	r3, r3, #21
 800266e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e00b      	b.n	8002690 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	331b      	adds	r3, #27
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	4413      	add	r3, r2
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	08db      	lsrs	r3, r3, #3
 8002688:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	331b      	adds	r3, #27
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	4413      	add	r3, r2
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0202 	and.w	r2, r3, #2
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	331b      	adds	r3, #27
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	4413      	add	r3, r2
 80026b2:	3304      	adds	r3, #4
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 020f 	and.w	r2, r3, #15
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	331b      	adds	r3, #27
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	4413      	add	r3, r2
 80026ca:	3304      	adds	r3, #4
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	331b      	adds	r3, #27
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	4413      	add	r3, r2
 80026e2:	3304      	adds	r3, #4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0c1b      	lsrs	r3, r3, #16
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	4413      	add	r3, r2
 800270e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0a1a      	lsrs	r2, r3, #8
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	4413      	add	r3, r2
 8002728:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0c1a      	lsrs	r2, r3, #16
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	3302      	adds	r3, #2
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	4413      	add	r3, r2
 8002742:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0e1a      	lsrs	r2, r3, #24
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	3303      	adds	r3, #3
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	4413      	add	r3, r2
 800275c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	3304      	adds	r3, #4
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	4413      	add	r3, r2
 8002774:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0a1a      	lsrs	r2, r3, #8
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	3305      	adds	r3, #5
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	4413      	add	r3, r2
 800278e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0c1a      	lsrs	r2, r3, #16
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	3306      	adds	r3, #6
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	0e1a      	lsrs	r2, r3, #24
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	3307      	adds	r3, #7
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d108      	bne.n	80027d0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0220 	orr.w	r2, r2, #32
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	e007      	b.n	80027e0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0220 	orr.w	r2, r2, #32
 80027de:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e006      	b.n	80027f2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
  }
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002812:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002814:	7afb      	ldrb	r3, [r7, #11]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d002      	beq.n	8002820 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800281a:	7afb      	ldrb	r3, [r7, #11]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d10f      	bne.n	8002840 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e005      	b.n	8002840 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002840:	68fb      	ldr	r3, [r7, #12]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d002      	beq.n	800286c <HAL_CAN_ActivateNotification+0x1e>
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d109      	bne.n	8002880 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6959      	ldr	r1, [r3, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e006      	b.n	800288e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
  }
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <__NVIC_SetPriorityGrouping+0x44>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b8:	4013      	ands	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ce:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <__NVIC_SetPriorityGrouping+0x44>)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	60d3      	str	r3, [r2, #12]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <__NVIC_GetPriorityGrouping+0x18>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	f003 0307 	and.w	r3, r3, #7
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db0a      	blt.n	800292a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	490c      	ldr	r1, [pc, #48]	; (800294c <__NVIC_SetPriority+0x4c>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	440b      	add	r3, r1
 8002924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002928:	e00a      	b.n	8002940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4908      	ldr	r1, [pc, #32]	; (8002950 <__NVIC_SetPriority+0x50>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3b04      	subs	r3, #4
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	440b      	add	r3, r1
 800293e:	761a      	strb	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f1c3 0307 	rsb	r3, r3, #7
 800296e:	2b04      	cmp	r3, #4
 8002970:	bf28      	it	cs
 8002972:	2304      	movcs	r3, #4
 8002974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3304      	adds	r3, #4
 800297a:	2b06      	cmp	r3, #6
 800297c:	d902      	bls.n	8002984 <NVIC_EncodePriority+0x30>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b03      	subs	r3, #3
 8002982:	e000      	b.n	8002986 <NVIC_EncodePriority+0x32>
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800299c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43d9      	mvns	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	4313      	orrs	r3, r2
         );
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029cc:	d301      	bcc.n	80029d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00f      	b.n	80029f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <SysTick_Config+0x40>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029da:	210f      	movs	r1, #15
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029e0:	f7ff ff8e 	bl	8002900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <SysTick_Config+0x40>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ea:	4b04      	ldr	r3, [pc, #16]	; (80029fc <SysTick_Config+0x40>)
 80029ec:	2207      	movs	r2, #7
 80029ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	e000e010 	.word	0xe000e010

08002a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff47 	bl	800289c <__NVIC_SetPriorityGrouping>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a28:	f7ff ff5c 	bl	80028e4 <__NVIC_GetPriorityGrouping>
 8002a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7ff ff8e 	bl	8002954 <NVIC_EncodePriority>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff5d 	bl	8002900 <__NVIC_SetPriority>
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ffb0 	bl	80029bc <SysTick_Config>
 8002a5c:	4603      	mov	r3, r0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e014      	b.n	8002aa2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	791b      	ldrb	r3, [r3, #4]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d105      	bne.n	8002a8e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fe f8b1 	bl	8000bf0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2202      	movs	r2, #2
 8002a92:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002aaa:	b480      	push	{r7}
 8002aac:	b087      	sub	sp, #28
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	3308      	adds	r3, #8
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e004      	b.n	8002ade <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	3314      	adds	r3, #20
 8002adc:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	371c      	adds	r7, #28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	795b      	ldrb	r3, [r3, #5]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_DAC_Start+0x16>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e039      	b.n	8002b7e <HAL_DAC_Start+0x8a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6819      	ldr	r1, [r3, #0]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	409a      	lsls	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10f      	bne.n	8002b50 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002b3a:	2b3c      	cmp	r3, #60	; 0x3c
 8002b3c:	d118      	bne.n	8002b70 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	e00f      	b.n	8002b70 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b5a:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8002b5e:	d107      	bne.n	8002b70 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0202 	orr.w	r2, r2, #2
 8002b6e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	795b      	ldrb	r3, [r3, #5]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_DAC_ConfigChannel+0x20>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e036      	b.n	8002c18 <HAL_DAC_ConfigChannel+0x8e>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002bbe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6819      	ldr	r1, [r3, #0]
 8002bf8:	22c0      	movs	r2, #192	; 0xc0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43da      	mvns	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	400a      	ands	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	371c      	adds	r7, #28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c32:	e154      	b.n	8002ede <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2101      	movs	r1, #1
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	4013      	ands	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8146 	beq.w	8002ed8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d005      	beq.n	8002c64 <HAL_GPIO_Init+0x40>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d130      	bne.n	8002cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	091b      	lsrs	r3, r3, #4
 8002cb0:	f003 0201 	and.w	r2, r3, #1
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d017      	beq.n	8002d02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	2203      	movs	r2, #3
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d123      	bne.n	8002d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	08da      	lsrs	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3208      	adds	r2, #8
 8002d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	220f      	movs	r2, #15
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	08da      	lsrs	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3208      	adds	r2, #8
 8002d50:	6939      	ldr	r1, [r7, #16]
 8002d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	2203      	movs	r2, #3
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0203 	and.w	r2, r3, #3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80a0 	beq.w	8002ed8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d98:	4b58      	ldr	r3, [pc, #352]	; (8002efc <HAL_GPIO_Init+0x2d8>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4a57      	ldr	r2, [pc, #348]	; (8002efc <HAL_GPIO_Init+0x2d8>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6193      	str	r3, [r2, #24]
 8002da4:	4b55      	ldr	r3, [pc, #340]	; (8002efc <HAL_GPIO_Init+0x2d8>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002db0:	4a53      	ldr	r2, [pc, #332]	; (8002f00 <HAL_GPIO_Init+0x2dc>)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	3302      	adds	r3, #2
 8002db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dda:	d019      	beq.n	8002e10 <HAL_GPIO_Init+0x1ec>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a49      	ldr	r2, [pc, #292]	; (8002f04 <HAL_GPIO_Init+0x2e0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d013      	beq.n	8002e0c <HAL_GPIO_Init+0x1e8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a48      	ldr	r2, [pc, #288]	; (8002f08 <HAL_GPIO_Init+0x2e4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00d      	beq.n	8002e08 <HAL_GPIO_Init+0x1e4>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a47      	ldr	r2, [pc, #284]	; (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <HAL_GPIO_Init+0x1e0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a46      	ldr	r2, [pc, #280]	; (8002f10 <HAL_GPIO_Init+0x2ec>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <HAL_GPIO_Init+0x1dc>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	e008      	b.n	8002e12 <HAL_GPIO_Init+0x1ee>
 8002e00:	2305      	movs	r3, #5
 8002e02:	e006      	b.n	8002e12 <HAL_GPIO_Init+0x1ee>
 8002e04:	2303      	movs	r3, #3
 8002e06:	e004      	b.n	8002e12 <HAL_GPIO_Init+0x1ee>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e002      	b.n	8002e12 <HAL_GPIO_Init+0x1ee>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_GPIO_Init+0x1ee>
 8002e10:	2300      	movs	r3, #0
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	f002 0203 	and.w	r2, r2, #3
 8002e18:	0092      	lsls	r2, r2, #2
 8002e1a:	4093      	lsls	r3, r2
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e22:	4937      	ldr	r1, [pc, #220]	; (8002f00 <HAL_GPIO_Init+0x2dc>)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e30:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <HAL_GPIO_Init+0x2f0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e54:	4a2f      	ldr	r2, [pc, #188]	; (8002f14 <HAL_GPIO_Init+0x2f0>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e5a:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_GPIO_Init+0x2f0>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e7e:	4a25      	ldr	r2, [pc, #148]	; (8002f14 <HAL_GPIO_Init+0x2f0>)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e84:	4b23      	ldr	r3, [pc, #140]	; (8002f14 <HAL_GPIO_Init+0x2f0>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ea8:	4a1a      	ldr	r2, [pc, #104]	; (8002f14 <HAL_GPIO_Init+0x2f0>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eae:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_GPIO_Init+0x2f0>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ed2:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <HAL_GPIO_Init+0x2f0>)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3301      	adds	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f aea3 	bne.w	8002c34 <HAL_GPIO_Init+0x10>
  }
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010000 	.word	0x40010000
 8002f04:	48000400 	.word	0x48000400
 8002f08:	48000800 	.word	0x48000800
 8002f0c:	48000c00 	.word	0x48000c00
 8002f10:	48001000 	.word	0x48001000
 8002f14:	40010400 	.word	0x40010400

08002f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f28:	787b      	ldrb	r3, [r7, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f34:	e002      	b.n	8002f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f001 b827 	b.w	8003fbc <HAL_RCC_OscConfig+0x1074>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8181 	beq.w	8003286 <HAL_RCC_OscConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f84:	4bbe      	ldr	r3, [pc, #760]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d00c      	beq.n	8002faa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f90:	4bbb      	ldr	r3, [pc, #748]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d15c      	bne.n	8003056 <HAL_RCC_OscConfig+0x10e>
 8002f9c:	4bb8      	ldr	r3, [pc, #736]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa8:	d155      	bne.n	8003056 <HAL_RCC_OscConfig+0x10e>
 8002faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fbe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d102      	bne.n	8002fdc <HAL_RCC_OscConfig+0x94>
 8002fd6:	4baa      	ldr	r3, [pc, #680]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	e015      	b.n	8003008 <HAL_RCC_OscConfig+0xc0>
 8002fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fe0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ff4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ff8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003004:	4b9e      	ldr	r3, [pc, #632]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800300c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003010:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003014:	fa92 f2a2 	rbit	r2, r2
 8003018:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800301c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003020:	fab2 f282 	clz	r2, r2
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	f042 0220 	orr.w	r2, r2, #32
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	f002 021f 	and.w	r2, r2, #31
 8003030:	2101      	movs	r1, #1
 8003032:	fa01 f202 	lsl.w	r2, r1, r2
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8123 	beq.w	8003284 <HAL_RCC_OscConfig+0x33c>
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 811a 	bne.w	8003284 <HAL_RCC_OscConfig+0x33c>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f000 bfb3 	b.w	8003fbc <HAL_RCC_OscConfig+0x1074>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x12e>
 8003068:	4b85      	ldr	r3, [pc, #532]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a84      	ldr	r2, [pc, #528]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e036      	b.n	80030e4 <HAL_RCC_OscConfig+0x19c>
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x158>
 8003086:	4b7e      	ldr	r3, [pc, #504]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a7d      	ldr	r2, [pc, #500]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 800308c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b7b      	ldr	r3, [pc, #492]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7a      	ldr	r2, [pc, #488]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 8003098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e021      	b.n	80030e4 <HAL_RCC_OscConfig+0x19c>
 80030a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x184>
 80030b2:	4b73      	ldr	r3, [pc, #460]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a72      	ldr	r2, [pc, #456]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 80030b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b70      	ldr	r3, [pc, #448]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a6f      	ldr	r2, [pc, #444]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e00b      	b.n	80030e4 <HAL_RCC_OscConfig+0x19c>
 80030cc:	4b6c      	ldr	r3, [pc, #432]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a6b      	ldr	r2, [pc, #428]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b69      	ldr	r3, [pc, #420]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a68      	ldr	r2, [pc, #416]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 80030de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030e4:	4b66      	ldr	r3, [pc, #408]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	f023 020f 	bic.w	r2, r3, #15
 80030ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4961      	ldr	r1, [pc, #388]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d05b      	beq.n	80031c6 <HAL_RCC_OscConfig+0x27e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fd fe6d 	bl	8000dec <HAL_GetTick>
 8003112:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	e00c      	b.n	8003132 <HAL_RCC_OscConfig+0x1ea>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003118:	f7fd fe68 	bl	8000dec <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f241 3288 	movw	r2, #5000	; 0x1388
 8003128:	4293      	cmp	r3, r2
 800312a:	d902      	bls.n	8003132 <HAL_RCC_OscConfig+0x1ea>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	f000 bf45 	b.w	8003fbc <HAL_RCC_OscConfig+0x1074>
 8003132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003136:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003146:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d102      	bne.n	8003164 <HAL_RCC_OscConfig+0x21c>
 800315e:	4b48      	ldr	r3, [pc, #288]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	e015      	b.n	8003190 <HAL_RCC_OscConfig+0x248>
 8003164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003168:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800317c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003180:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800318c:	4b3c      	ldr	r3, [pc, #240]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003194:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003198:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800319c:	fa92 f2a2 	rbit	r2, r2
 80031a0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80031a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80031a8:	fab2 f282 	clz	r2, r2
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f042 0220 	orr.w	r2, r2, #32
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f002 021f 	and.w	r2, r2, #31
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0a9      	beq.n	8003118 <HAL_RCC_OscConfig+0x1d0>
 80031c4:	e05f      	b.n	8003286 <HAL_RCC_OscConfig+0x33e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fd fe11 	bl	8000dec <HAL_GetTick>
 80031ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ce:	e00c      	b.n	80031ea <HAL_RCC_OscConfig+0x2a2>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fd fe0c 	bl	8000dec <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d902      	bls.n	80031ea <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	f000 bee9 	b.w	8003fbc <HAL_RCC_OscConfig+0x1074>
 80031ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ee:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80031fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d102      	bne.n	800321c <HAL_RCC_OscConfig+0x2d4>
 8003216:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	e015      	b.n	8003248 <HAL_RCC_OscConfig+0x300>
 800321c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003220:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003234:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003238:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003244:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800324c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003250:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003254:	fa92 f2a2 	rbit	r2, r2
 8003258:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800325c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003260:	fab2 f282 	clz	r2, r2
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	f042 0220 	orr.w	r2, r2, #32
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	f002 021f 	and.w	r2, r2, #31
 8003270:	2101      	movs	r1, #1
 8003272:	fa01 f202 	lsl.w	r2, r1, r2
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1a9      	bne.n	80031d0 <HAL_RCC_OscConfig+0x288>
 800327c:	e003      	b.n	8003286 <HAL_RCC_OscConfig+0x33e>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 817d 	beq.w	8003596 <HAL_RCC_OscConfig+0x64e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800329c:	4ba6      	ldr	r3, [pc, #664]	; (8003538 <HAL_RCC_OscConfig+0x5f0>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <HAL_RCC_OscConfig+0x378>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032a8:	4ba3      	ldr	r3, [pc, #652]	; (8003538 <HAL_RCC_OscConfig+0x5f0>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d172      	bne.n	800339a <HAL_RCC_OscConfig+0x452>
 80032b4:	4ba0      	ldr	r3, [pc, #640]	; (8003538 <HAL_RCC_OscConfig+0x5f0>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d16c      	bne.n	800339a <HAL_RCC_OscConfig+0x452>
 80032c0:	2302      	movs	r3, #2
 80032c2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80032d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <HAL_RCC_OscConfig+0x3a8>
 80032ea:	4b93      	ldr	r3, [pc, #588]	; (8003538 <HAL_RCC_OscConfig+0x5f0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e013      	b.n	8003318 <HAL_RCC_OscConfig+0x3d0>
 80032f0:	2302      	movs	r3, #2
 80032f2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003302:	2302      	movs	r3, #2
 8003304:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003308:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003314:	4b88      	ldr	r3, [pc, #544]	; (8003538 <HAL_RCC_OscConfig+0x5f0>)
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	2202      	movs	r2, #2
 800331a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800331e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003322:	fa92 f2a2 	rbit	r2, r2
 8003326:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800332a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800332e:	fab2 f282 	clz	r2, r2
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	f042 0220 	orr.w	r2, r2, #32
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	f002 021f 	and.w	r2, r2, #31
 800333e:	2101      	movs	r1, #1
 8003340:	fa01 f202 	lsl.w	r2, r1, r2
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCC_OscConfig+0x418>
 800334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d002      	beq.n	8003360 <HAL_RCC_OscConfig+0x418>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f000 be2e 	b.w	8003fbc <HAL_RCC_OscConfig+0x1074>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b75      	ldr	r3, [pc, #468]	; (8003538 <HAL_RCC_OscConfig+0x5f0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	21f8      	movs	r1, #248	; 0xf8
 8003376:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800337e:	fa91 f1a1 	rbit	r1, r1
 8003382:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003386:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800338a:	fab1 f181 	clz	r1, r1
 800338e:	b2c9      	uxtb	r1, r1
 8003390:	408b      	lsls	r3, r1
 8003392:	4969      	ldr	r1, [pc, #420]	; (8003538 <HAL_RCC_OscConfig+0x5f0>)
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003398:	e0fd      	b.n	8003596 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8088 	beq.w	80034bc <HAL_RCC_OscConfig+0x574>
 80033ac:	2301      	movs	r3, #1
 80033ae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80033be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	461a      	mov	r2, r3
 80033d4:	2301      	movs	r3, #1
 80033d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fd fd08 	bl	8000dec <HAL_GetTick>
 80033dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e0:	e00a      	b.n	80033f8 <HAL_RCC_OscConfig+0x4b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e2:	f7fd fd03 	bl	8000dec <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d902      	bls.n	80033f8 <HAL_RCC_OscConfig+0x4b0>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	f000 bde2 	b.w	8003fbc <HAL_RCC_OscConfig+0x1074>
 80033f8:	2302      	movs	r3, #2
 80033fa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800340a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d102      	bne.n	8003428 <HAL_RCC_OscConfig+0x4e0>
 8003422:	4b45      	ldr	r3, [pc, #276]	; (8003538 <HAL_RCC_OscConfig+0x5f0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	e013      	b.n	8003450 <HAL_RCC_OscConfig+0x508>
 8003428:	2302      	movs	r3, #2
 800342a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800343a:	2302      	movs	r3, #2
 800343c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003440:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800344c:	4b3a      	ldr	r3, [pc, #232]	; (8003538 <HAL_RCC_OscConfig+0x5f0>)
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	2202      	movs	r2, #2
 8003452:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003456:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800345a:	fa92 f2a2 	rbit	r2, r2
 800345e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003462:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003466:	fab2 f282 	clz	r2, r2
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	f042 0220 	orr.w	r2, r2, #32
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	f002 021f 	and.w	r2, r2, #31
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0af      	beq.n	80033e2 <HAL_RCC_OscConfig+0x49a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	4b2d      	ldr	r3, [pc, #180]	; (8003538 <HAL_RCC_OscConfig+0x5f0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	21f8      	movs	r1, #248	; 0xf8
 8003498:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80034a0:	fa91 f1a1 	rbit	r1, r1
 80034a4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80034a8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80034ac:	fab1 f181 	clz	r1, r1
 80034b0:	b2c9      	uxtb	r1, r1
 80034b2:	408b      	lsls	r3, r1
 80034b4:	4920      	ldr	r1, [pc, #128]	; (8003538 <HAL_RCC_OscConfig+0x5f0>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
 80034ba:	e06c      	b.n	8003596 <HAL_RCC_OscConfig+0x64e>
 80034bc:	2301      	movs	r3, #1
 80034be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80034ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	461a      	mov	r2, r3
 80034e4:	2300      	movs	r3, #0
 80034e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fd fc80 	bl	8000dec <HAL_GetTick>
 80034ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f0:	e00a      	b.n	8003508 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fd fc7b 	bl	8000dec <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d902      	bls.n	8003508 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	f000 bd5a 	b.w	8003fbc <HAL_RCC_OscConfig+0x1074>
 8003508:	2302      	movs	r3, #2
 800350a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003512:	fa93 f3a3 	rbit	r3, r3
 8003516:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800351a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d104      	bne.n	800353c <HAL_RCC_OscConfig+0x5f4>
 8003532:	4b01      	ldr	r3, [pc, #4]	; (8003538 <HAL_RCC_OscConfig+0x5f0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	e015      	b.n	8003564 <HAL_RCC_OscConfig+0x61c>
 8003538:	40021000 	.word	0x40021000
 800353c:	2302      	movs	r3, #2
 800353e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800354e:	2302      	movs	r3, #2
 8003550:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003554:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003560:	4bc8      	ldr	r3, [pc, #800]	; (8003884 <HAL_RCC_OscConfig+0x93c>)
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	2202      	movs	r2, #2
 8003566:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800356a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800356e:	fa92 f2a2 	rbit	r2, r2
 8003572:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003576:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800357a:	fab2 f282 	clz	r2, r2
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	f042 0220 	orr.w	r2, r2, #32
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	f002 021f 	and.w	r2, r2, #31
 800358a:	2101      	movs	r1, #1
 800358c:	fa01 f202 	lsl.w	r2, r1, r2
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1ad      	bne.n	80034f2 <HAL_RCC_OscConfig+0x5aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8110 	beq.w	80037cc <HAL_RCC_OscConfig+0x884>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d079      	beq.n	80036b0 <HAL_RCC_OscConfig+0x768>
 80035bc:	2301      	movs	r3, #1
 80035be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80035ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	4bab      	ldr	r3, [pc, #684]	; (8003888 <HAL_RCC_OscConfig+0x940>)
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	461a      	mov	r2, r3
 80035e2:	2301      	movs	r3, #1
 80035e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e6:	f7fd fc01 	bl	8000dec <HAL_GetTick>
 80035ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_OscConfig+0x6be>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f0:	f7fd fbfc 	bl	8000dec <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d902      	bls.n	8003606 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	f000 bcdb 	b.w	8003fbc <HAL_RCC_OscConfig+0x1074>
 8003606:	2302      	movs	r3, #2
 8003608:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003620:	2202      	movs	r2, #2
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	fa93 f2a3 	rbit	r2, r3
 8003632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003644:	2202      	movs	r2, #2
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	fa93 f2a3 	rbit	r2, r3
 8003656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800365e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003660:	4b88      	ldr	r3, [pc, #544]	; (8003884 <HAL_RCC_OscConfig+0x93c>)
 8003662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003668:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800366c:	2102      	movs	r1, #2
 800366e:	6019      	str	r1, [r3, #0]
 8003670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003674:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	fa93 f1a3 	rbit	r1, r3
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003686:	6019      	str	r1, [r3, #0]
  return result;
 8003688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	2101      	movs	r1, #1
 80036a4:	fa01 f303 	lsl.w	r3, r1, r3
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0a0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x6a8>
 80036ae:	e08d      	b.n	80037cc <HAL_RCC_OscConfig+0x884>
 80036b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	fa93 f2a3 	rbit	r2, r3
 80036ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80036d2:	601a      	str	r2, [r3, #0]
  return result;
 80036d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80036dc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b68      	ldr	r3, [pc, #416]	; (8003888 <HAL_RCC_OscConfig+0x940>)
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	461a      	mov	r2, r3
 80036ee:	2300      	movs	r3, #0
 80036f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f2:	f7fd fb7b 	bl	8000dec <HAL_GetTick>
 80036f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_OscConfig+0x7ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036fc:	f7fd fb76 	bl	8000dec <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d902      	bls.n	8003712 <HAL_RCC_OscConfig+0x7ca>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	f000 bc55 	b.w	8003fbc <HAL_RCC_OscConfig+0x1074>
 8003712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003716:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800371a:	2202      	movs	r2, #2
 800371c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	fa93 f2a3 	rbit	r2, r3
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800373e:	2202      	movs	r2, #2
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003746:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	fa93 f2a3 	rbit	r2, r3
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003762:	2202      	movs	r2, #2
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	fa93 f2a3 	rbit	r2, r3
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800377c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377e:	4b41      	ldr	r3, [pc, #260]	; (8003884 <HAL_RCC_OscConfig+0x93c>)
 8003780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003786:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800378a:	2102      	movs	r1, #2
 800378c:	6019      	str	r1, [r3, #0]
 800378e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003792:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	fa93 f1a3 	rbit	r1, r3
 800379c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80037a4:	6019      	str	r1, [r3, #0]
  return result;
 80037a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037aa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f303 	lsl.w	r3, r1, r3
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d197      	bne.n	80036fc <HAL_RCC_OscConfig+0x7b4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 81a1 	beq.w	8003b24 <HAL_RCC_OscConfig+0xbdc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e2:	2300      	movs	r3, #0
 80037e4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e8:	4b26      	ldr	r3, [pc, #152]	; (8003884 <HAL_RCC_OscConfig+0x93c>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d116      	bne.n	8003822 <HAL_RCC_OscConfig+0x8da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b23      	ldr	r3, [pc, #140]	; (8003884 <HAL_RCC_OscConfig+0x93c>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	4a22      	ldr	r2, [pc, #136]	; (8003884 <HAL_RCC_OscConfig+0x93c>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fe:	61d3      	str	r3, [r2, #28]
 8003800:	4b20      	ldr	r3, [pc, #128]	; (8003884 <HAL_RCC_OscConfig+0x93c>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003816:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800381a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003822:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_RCC_OscConfig+0x944>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11a      	bne.n	8003864 <HAL_RCC_OscConfig+0x91c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382e:	4b17      	ldr	r3, [pc, #92]	; (800388c <HAL_RCC_OscConfig+0x944>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a16      	ldr	r2, [pc, #88]	; (800388c <HAL_RCC_OscConfig+0x944>)
 8003834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003838:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800383a:	f7fd fad7 	bl	8000dec <HAL_GetTick>
 800383e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003842:	e009      	b.n	8003858 <HAL_RCC_OscConfig+0x910>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003844:	f7fd fad2 	bl	8000dec <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b64      	cmp	r3, #100	; 0x64
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x910>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e3b1      	b.n	8003fbc <HAL_RCC_OscConfig+0x1074>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_RCC_OscConfig+0x944>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ef      	beq.n	8003844 <HAL_RCC_OscConfig+0x8fc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003868:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d10d      	bne.n	8003890 <HAL_RCC_OscConfig+0x948>
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_RCC_OscConfig+0x93c>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	4a02      	ldr	r2, [pc, #8]	; (8003884 <HAL_RCC_OscConfig+0x93c>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6213      	str	r3, [r2, #32]
 8003880:	e03c      	b.n	80038fc <HAL_RCC_OscConfig+0x9b4>
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	10908120 	.word	0x10908120
 800388c:	40007000 	.word	0x40007000
 8003890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003894:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10c      	bne.n	80038ba <HAL_RCC_OscConfig+0x972>
 80038a0:	4bc1      	ldr	r3, [pc, #772]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	4ac0      	ldr	r2, [pc, #768]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	6213      	str	r3, [r2, #32]
 80038ac:	4bbe      	ldr	r3, [pc, #760]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	4abd      	ldr	r2, [pc, #756]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 80038b2:	f023 0304 	bic.w	r3, r3, #4
 80038b6:	6213      	str	r3, [r2, #32]
 80038b8:	e020      	b.n	80038fc <HAL_RCC_OscConfig+0x9b4>
 80038ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b05      	cmp	r3, #5
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCC_OscConfig+0x99c>
 80038ca:	4bb7      	ldr	r3, [pc, #732]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	4ab6      	ldr	r2, [pc, #728]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 80038d0:	f043 0304 	orr.w	r3, r3, #4
 80038d4:	6213      	str	r3, [r2, #32]
 80038d6:	4bb4      	ldr	r3, [pc, #720]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	4ab3      	ldr	r2, [pc, #716]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6213      	str	r3, [r2, #32]
 80038e2:	e00b      	b.n	80038fc <HAL_RCC_OscConfig+0x9b4>
 80038e4:	4bb0      	ldr	r3, [pc, #704]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	4aaf      	ldr	r2, [pc, #700]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	6213      	str	r3, [r2, #32]
 80038f0:	4bad      	ldr	r3, [pc, #692]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	4aac      	ldr	r2, [pc, #688]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 80038f6:	f023 0304 	bic.w	r3, r3, #4
 80038fa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003900:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8081 	beq.w	8003a10 <HAL_RCC_OscConfig+0xac8>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390e:	f7fd fa6d 	bl	8000dec <HAL_GetTick>
 8003912:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003916:	e00b      	b.n	8003930 <HAL_RCC_OscConfig+0x9e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fd fa68 	bl	8000dec <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f241 3288 	movw	r2, #5000	; 0x1388
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x9e8>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e345      	b.n	8003fbc <HAL_RCC_OscConfig+0x1074>
 8003930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003934:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003938:	2202      	movs	r2, #2
 800393a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003940:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	fa93 f2a3 	rbit	r2, r3
 800394a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003958:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800395c:	2202      	movs	r2, #2
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003964:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	fa93 f2a3 	rbit	r2, r3
 800396e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003972:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003976:	601a      	str	r2, [r3, #0]
  return result;
 8003978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003980:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d102      	bne.n	800399c <HAL_RCC_OscConfig+0xa54>
 8003996:	4b84      	ldr	r3, [pc, #528]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	e013      	b.n	80039c4 <HAL_RCC_OscConfig+0xa7c>
 800399c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80039a4:	2202      	movs	r2, #2
 80039a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	fa93 f2a3 	rbit	r2, r3
 80039b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	4b79      	ldr	r3, [pc, #484]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80039cc:	2102      	movs	r1, #2
 80039ce:	6011      	str	r1, [r2, #0]
 80039d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039d4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	fa92 f1a2 	rbit	r1, r2
 80039de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039e2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80039e6:	6011      	str	r1, [r2, #0]
  return result;
 80039e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ec:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	fab2 f282 	clz	r2, r2
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	f002 021f 	and.w	r2, r2, #31
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f202 	lsl.w	r2, r1, r2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d084      	beq.n	8003918 <HAL_RCC_OscConfig+0x9d0>
 8003a0e:	e07f      	b.n	8003b10 <HAL_RCC_OscConfig+0xbc8>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a10:	f7fd f9ec 	bl	8000dec <HAL_GetTick>
 8003a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a18:	e00b      	b.n	8003a32 <HAL_RCC_OscConfig+0xaea>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f7fd f9e7 	bl	8000dec <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0xaea>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e2c4      	b.n	8003fbc <HAL_RCC_OscConfig+0x1074>
 8003a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a36:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a42:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	fa93 f2a3 	rbit	r2, r3
 8003a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a50:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a5e:	2202      	movs	r2, #2
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a66:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	fa93 f2a3 	rbit	r2, r3
 8003a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a74:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003a78:	601a      	str	r2, [r3, #0]
  return result;
 8003a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003a82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a84:	fab3 f383 	clz	r3, r3
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f043 0302 	orr.w	r3, r3, #2
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d102      	bne.n	8003a9e <HAL_RCC_OscConfig+0xb56>
 8003a98:	4b43      	ldr	r3, [pc, #268]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	e013      	b.n	8003ac6 <HAL_RCC_OscConfig+0xb7e>
 8003a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	fa93 f2a3 	rbit	r2, r3
 8003ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003ace:	2102      	movs	r1, #2
 8003ad0:	6011      	str	r1, [r2, #0]
 8003ad2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	fa92 f1a2 	rbit	r1, r2
 8003ae0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ae4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003ae8:	6011      	str	r1, [r2, #0]
  return result;
 8003aea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aee:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	fab2 f282 	clz	r2, r2
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	f002 021f 	and.w	r2, r2, #31
 8003b04:	2101      	movs	r1, #1
 8003b06:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d184      	bne.n	8003a1a <HAL_RCC_OscConfig+0xad2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b10:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d105      	bne.n	8003b24 <HAL_RCC_OscConfig+0xbdc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b18:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 8003b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b22:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8242 	beq.w	8003fba <HAL_RCC_OscConfig+0x1072>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b36:	4b1c      	ldr	r3, [pc, #112]	; (8003ba8 <HAL_RCC_OscConfig+0xc60>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	f000 8213 	beq.w	8003f6a <HAL_RCC_OscConfig+0x1022>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	f040 8162 	bne.w	8003e1a <HAL_RCC_OscConfig+0xed2>
 8003b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003b5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b68:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	fa93 f2a3 	rbit	r2, r3
 8003b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b76:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003b7a:	601a      	str	r2, [r3, #0]
  return result;
 8003b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b80:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003b84:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b86:	fab3 f383 	clz	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	461a      	mov	r2, r3
 8003b98:	2300      	movs	r3, #0
 8003b9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fd f926 	bl	8000dec <HAL_GetTick>
 8003ba0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba4:	e00c      	b.n	8003bc0 <HAL_RCC_OscConfig+0xc78>
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fd f91e 	bl	8000dec <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0xc78>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e1fd      	b.n	8003fbc <HAL_RCC_OscConfig+0x1074>
 8003bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	fa93 f2a3 	rbit	r2, r3
 8003bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003be4:	601a      	str	r2, [r3, #0]
  return result;
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003bee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bf0:	fab3 f383 	clz	r3, r3
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d102      	bne.n	8003c0a <HAL_RCC_OscConfig+0xcc2>
 8003c04:	4bb0      	ldr	r3, [pc, #704]	; (8003ec8 <HAL_RCC_OscConfig+0xf80>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	e027      	b.n	8003c5a <HAL_RCC_OscConfig+0xd12>
 8003c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	fa93 f2a3 	rbit	r2, r3
 8003c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c34:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c42:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	fa93 f2a3 	rbit	r2, r3
 8003c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c50:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	4b9c      	ldr	r3, [pc, #624]	; (8003ec8 <HAL_RCC_OscConfig+0xf80>)
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c5e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003c62:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c66:	6011      	str	r1, [r2, #0]
 8003c68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c6c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	fa92 f1a2 	rbit	r1, r2
 8003c76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c7a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003c7e:	6011      	str	r1, [r2, #0]
  return result;
 8003c80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c84:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	fab2 f282 	clz	r2, r2
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	f042 0220 	orr.w	r2, r2, #32
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	f002 021f 	and.w	r2, r2, #31
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d182      	bne.n	8003bac <HAL_RCC_OscConfig+0xc64>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca6:	4b88      	ldr	r3, [pc, #544]	; (8003ec8 <HAL_RCC_OscConfig+0xf80>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	497f      	ldr	r1, [pc, #508]	; (8003ec8 <HAL_RCC_OscConfig+0xf80>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	604b      	str	r3, [r1, #4]
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003cd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	fa93 f2a3 	rbit	r2, r3
 8003cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cee:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003cf2:	601a      	str	r2, [r3, #0]
  return result;
 8003cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003cfc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2301      	movs	r3, #1
 8003d12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fd f86a 	bl	8000dec <HAL_GetTick>
 8003d18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d1c:	e009      	b.n	8003d32 <HAL_RCC_OscConfig+0xdea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1e:	f7fd f865 	bl	8000dec <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0xdea>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e144      	b.n	8003fbc <HAL_RCC_OscConfig+0x1074>
 8003d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d36:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d44:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	fa93 f2a3 	rbit	r2, r3
 8003d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d52:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d56:	601a      	str	r2, [r3, #0]
  return result;
 8003d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d62:	fab3 f383 	clz	r3, r3
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d102      	bne.n	8003d7c <HAL_RCC_OscConfig+0xe34>
 8003d76:	4b54      	ldr	r3, [pc, #336]	; (8003ec8 <HAL_RCC_OscConfig+0xf80>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	e027      	b.n	8003dcc <HAL_RCC_OscConfig+0xe84>
 8003d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d80:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003d84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	fa93 f2a3 	rbit	r2, r3
 8003d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	fa93 f2a3 	rbit	r2, r3
 8003dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	4b3f      	ldr	r3, [pc, #252]	; (8003ec8 <HAL_RCC_OscConfig+0xf80>)
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dd0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003dd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dd8:	6011      	str	r1, [r2, #0]
 8003dda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dde:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	fa92 f1a2 	rbit	r1, r2
 8003de8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003df0:	6011      	str	r1, [r2, #0]
  return result;
 8003df2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003df6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	fab2 f282 	clz	r2, r2
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	f042 0220 	orr.w	r2, r2, #32
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	f002 021f 	and.w	r2, r2, #31
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d082      	beq.n	8003d1e <HAL_RCC_OscConfig+0xdd6>
 8003e18:	e0cf      	b.n	8003fba <HAL_RCC_OscConfig+0x1072>
 8003e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003e22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	fa93 f2a3 	rbit	r2, r3
 8003e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e3e:	601a      	str	r2, [r3, #0]
  return result;
 8003e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e44:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e48:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e60:	f7fc ffc4 	bl	8000dec <HAL_GetTick>
 8003e64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e68:	e009      	b.n	8003e7e <HAL_RCC_OscConfig+0xf36>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7fc ffbf 	bl	8000dec <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0xf36>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e09e      	b.n	8003fbc <HAL_RCC_OscConfig+0x1074>
 8003e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e82:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003e86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e90:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	fa93 f2a3 	rbit	r2, r3
 8003e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ea2:	601a      	str	r2, [r3, #0]
  return result;
 8003ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003eac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eae:	fab3 f383 	clz	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d104      	bne.n	8003ecc <HAL_RCC_OscConfig+0xf84>
 8003ec2:	4b01      	ldr	r3, [pc, #4]	; (8003ec8 <HAL_RCC_OscConfig+0xf80>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	e029      	b.n	8003f1c <HAL_RCC_OscConfig+0xfd4>
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ede:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	fa93 f2a3 	rbit	r2, r3
 8003ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003efa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f04:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	fa93 f2a3 	rbit	r2, r3
 8003f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f12:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <HAL_RCC_OscConfig+0x1080>)
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f20:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003f24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f28:	6011      	str	r1, [r2, #0]
 8003f2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f2e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	fa92 f1a2 	rbit	r1, r2
 8003f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f3c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f40:	6011      	str	r1, [r2, #0]
  return result;
 8003f42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f46:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	fab2 f282 	clz	r2, r2
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	f042 0220 	orr.w	r2, r2, #32
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	f002 021f 	and.w	r2, r2, #31
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d180      	bne.n	8003e6a <HAL_RCC_OscConfig+0xf22>
 8003f68:	e027      	b.n	8003fba <HAL_RCC_OscConfig+0x1072>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_OscConfig+0x1036>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e01e      	b.n	8003fbc <HAL_RCC_OscConfig+0x1074>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <HAL_RCC_OscConfig+0x1080>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f8a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d10b      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x106e>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003f9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d001      	beq.n	8003fba <HAL_RCC_OscConfig+0x1072>
#endif
        {
          return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_RCC_OscConfig+0x1074>
        }
      }
    }
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000

08003fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b09e      	sub	sp, #120	; 0x78
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e162      	b.n	80042aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b90      	ldr	r3, [pc, #576]	; (8004228 <HAL_RCC_ClockConfig+0x25c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d910      	bls.n	8004014 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b8d      	ldr	r3, [pc, #564]	; (8004228 <HAL_RCC_ClockConfig+0x25c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 0207 	bic.w	r2, r3, #7
 8003ffa:	498b      	ldr	r1, [pc, #556]	; (8004228 <HAL_RCC_ClockConfig+0x25c>)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004002:	4b89      	ldr	r3, [pc, #548]	; (8004228 <HAL_RCC_ClockConfig+0x25c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e14a      	b.n	80042aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004020:	4b82      	ldr	r3, [pc, #520]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	497f      	ldr	r1, [pc, #508]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 800402e:	4313      	orrs	r3, r2
 8004030:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 80dc 	beq.w	80041f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d13c      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xf6>
 8004048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800404c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004050:	fa93 f3a3 	rbit	r3, r3
 8004054:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004058:	fab3 f383 	clz	r3, r3
 800405c:	b2db      	uxtb	r3, r3
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	d102      	bne.n	8004072 <HAL_RCC_ClockConfig+0xa6>
 800406c:	4b6f      	ldr	r3, [pc, #444]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	e00f      	b.n	8004092 <HAL_RCC_ClockConfig+0xc6>
 8004072:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004076:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004078:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800407a:	fa93 f3a3 	rbit	r3, r3
 800407e:	667b      	str	r3, [r7, #100]	; 0x64
 8004080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004084:	663b      	str	r3, [r7, #96]	; 0x60
 8004086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004088:	fa93 f3a3 	rbit	r3, r3
 800408c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800408e:	4b67      	ldr	r3, [pc, #412]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004096:	65ba      	str	r2, [r7, #88]	; 0x58
 8004098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800409a:	fa92 f2a2 	rbit	r2, r2
 800409e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80040a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040a2:	fab2 f282 	clz	r2, r2
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	f042 0220 	orr.w	r2, r2, #32
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	f002 021f 	and.w	r2, r2, #31
 80040b2:	2101      	movs	r1, #1
 80040b4:	fa01 f202 	lsl.w	r2, r1, r2
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d17b      	bne.n	80041b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0f3      	b.n	80042aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d13c      	bne.n	8004144 <HAL_RCC_ClockConfig+0x178>
 80040ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d102      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x128>
 80040ee:	4b4f      	ldr	r3, [pc, #316]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	e00f      	b.n	8004114 <HAL_RCC_ClockConfig+0x148>
 80040f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
 8004102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004106:	643b      	str	r3, [r7, #64]	; 0x40
 8004108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004110:	4b46      	ldr	r3, [pc, #280]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004118:	63ba      	str	r2, [r7, #56]	; 0x38
 800411a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800411c:	fa92 f2a2 	rbit	r2, r2
 8004120:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004124:	fab2 f282 	clz	r2, r2
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	f042 0220 	orr.w	r2, r2, #32
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	f002 021f 	and.w	r2, r2, #31
 8004134:	2101      	movs	r1, #1
 8004136:	fa01 f202 	lsl.w	r2, r1, r2
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d13a      	bne.n	80041b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0b2      	b.n	80042aa <HAL_RCC_ClockConfig+0x2de>
 8004144:	2302      	movs	r3, #2
 8004146:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	fa93 f3a3 	rbit	r3, r3
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d102      	bne.n	800416c <HAL_RCC_ClockConfig+0x1a0>
 8004166:	4b31      	ldr	r3, [pc, #196]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	e00d      	b.n	8004188 <HAL_RCC_ClockConfig+0x1bc>
 800416c:	2302      	movs	r3, #2
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	fa93 f3a3 	rbit	r3, r3
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
 8004178:	2302      	movs	r3, #2
 800417a:	623b      	str	r3, [r7, #32]
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	4b29      	ldr	r3, [pc, #164]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	2202      	movs	r2, #2
 800418a:	61ba      	str	r2, [r7, #24]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	fa92 f2a2 	rbit	r2, r2
 8004192:	617a      	str	r2, [r7, #20]
  return result;
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	fab2 f282 	clz	r2, r2
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	f042 0220 	orr.w	r2, r2, #32
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	f002 021f 	and.w	r2, r2, #31
 80041a6:	2101      	movs	r1, #1
 80041a8:	fa01 f202 	lsl.w	r2, r1, r2
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e079      	b.n	80042aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f023 0203 	bic.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	491a      	ldr	r1, [pc, #104]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c8:	f7fc fe10 	bl	8000dec <HAL_GetTick>
 80041cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d0:	f7fc fe0c 	bl	8000dec <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e061      	b.n	80042aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 020c 	and.w	r2, r3, #12
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d1eb      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCC_ClockConfig+0x25c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d214      	bcs.n	8004230 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <HAL_RCC_ClockConfig+0x25c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 0207 	bic.w	r2, r3, #7
 800420e:	4906      	ldr	r1, [pc, #24]	; (8004228 <HAL_RCC_ClockConfig+0x25c>)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004216:	4b04      	ldr	r3, [pc, #16]	; (8004228 <HAL_RCC_ClockConfig+0x25c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d005      	beq.n	8004230 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e040      	b.n	80042aa <HAL_RCC_ClockConfig+0x2de>
 8004228:	40022000 	.word	0x40022000
 800422c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800423c:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCC_ClockConfig+0x2e8>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	491a      	ldr	r1, [pc, #104]	; (80042b4 <HAL_RCC_ClockConfig+0x2e8>)
 800424a:	4313      	orrs	r3, r2
 800424c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800425a:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <HAL_RCC_ClockConfig+0x2e8>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4912      	ldr	r1, [pc, #72]	; (80042b4 <HAL_RCC_ClockConfig+0x2e8>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800426e:	f000 f829 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8004272:	4601      	mov	r1, r0
 8004274:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <HAL_RCC_ClockConfig+0x2e8>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800427c:	22f0      	movs	r2, #240	; 0xf0
 800427e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	fa92 f2a2 	rbit	r2, r2
 8004286:	60fa      	str	r2, [r7, #12]
  return result;
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	fab2 f282 	clz	r2, r2
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	40d3      	lsrs	r3, r2
 8004292:	4a09      	ldr	r2, [pc, #36]	; (80042b8 <HAL_RCC_ClockConfig+0x2ec>)
 8004294:	5cd3      	ldrb	r3, [r2, r3]
 8004296:	fa21 f303 	lsr.w	r3, r1, r3
 800429a:	4a08      	ldr	r2, [pc, #32]	; (80042bc <HAL_RCC_ClockConfig+0x2f0>)
 800429c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <HAL_RCC_ClockConfig+0x2f4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fc fd5e 	bl	8000d64 <HAL_InitTick>
  
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3778      	adds	r7, #120	; 0x78
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000
 80042b8:	0800440c 	.word	0x0800440c
 80042bc:	20000004 	.word	0x20000004
 80042c0:	20000008 	.word	0x20000008

080042c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b08b      	sub	sp, #44	; 0x2c
 80042c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	2300      	movs	r3, #0
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80042de:	4b29      	ldr	r3, [pc, #164]	; (8004384 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d002      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x30>
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d003      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0x36>
 80042f2:	e03c      	b.n	800436e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042f4:	4b24      	ldr	r3, [pc, #144]	; (8004388 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042f6:	623b      	str	r3, [r7, #32]
      break;
 80042f8:	e03c      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004300:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004304:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	fa92 f2a2 	rbit	r2, r2
 800430c:	607a      	str	r2, [r7, #4]
  return result;
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	fab2 f282 	clz	r2, r2
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	40d3      	lsrs	r3, r2
 8004318:	4a1c      	ldr	r2, [pc, #112]	; (800438c <HAL_RCC_GetSysClockFreq+0xc8>)
 800431a:	5cd3      	ldrb	r3, [r2, r3]
 800431c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800431e:	4b19      	ldr	r3, [pc, #100]	; (8004384 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	220f      	movs	r2, #15
 8004328:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	fa92 f2a2 	rbit	r2, r2
 8004330:	60fa      	str	r2, [r7, #12]
  return result;
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	fab2 f282 	clz	r2, r2
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	40d3      	lsrs	r3, r2
 800433c:	4a14      	ldr	r2, [pc, #80]	; (8004390 <HAL_RCC_GetSysClockFreq+0xcc>)
 800433e:	5cd3      	ldrb	r3, [r2, r3]
 8004340:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800434c:	4a0e      	ldr	r2, [pc, #56]	; (8004388 <HAL_RCC_GetSysClockFreq+0xc4>)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	fbb2 f2f3 	udiv	r2, r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
 800435c:	e004      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	623b      	str	r3, [r7, #32]
      break;
 800436c:	e002      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004370:	623b      	str	r3, [r7, #32]
      break;
 8004372:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004374:	6a3b      	ldr	r3, [r7, #32]
}
 8004376:	4618      	mov	r0, r3
 8004378:	372c      	adds	r7, #44	; 0x2c
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	00b71b00 	.word	0x00b71b00
 800438c:	0800441c 	.word	0x0800441c
 8004390:	0800442c 	.word	0x0800442c
 8004394:	003d0900 	.word	0x003d0900
 8004398:	007a1200 	.word	0x007a1200

0800439c <__libc_init_array>:
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	4d0d      	ldr	r5, [pc, #52]	; (80043d4 <__libc_init_array+0x38>)
 80043a0:	4c0d      	ldr	r4, [pc, #52]	; (80043d8 <__libc_init_array+0x3c>)
 80043a2:	1b64      	subs	r4, r4, r5
 80043a4:	10a4      	asrs	r4, r4, #2
 80043a6:	2600      	movs	r6, #0
 80043a8:	42a6      	cmp	r6, r4
 80043aa:	d109      	bne.n	80043c0 <__libc_init_array+0x24>
 80043ac:	4d0b      	ldr	r5, [pc, #44]	; (80043dc <__libc_init_array+0x40>)
 80043ae:	4c0c      	ldr	r4, [pc, #48]	; (80043e0 <__libc_init_array+0x44>)
 80043b0:	f000 f820 	bl	80043f4 <_init>
 80043b4:	1b64      	subs	r4, r4, r5
 80043b6:	10a4      	asrs	r4, r4, #2
 80043b8:	2600      	movs	r6, #0
 80043ba:	42a6      	cmp	r6, r4
 80043bc:	d105      	bne.n	80043ca <__libc_init_array+0x2e>
 80043be:	bd70      	pop	{r4, r5, r6, pc}
 80043c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c4:	4798      	blx	r3
 80043c6:	3601      	adds	r6, #1
 80043c8:	e7ee      	b.n	80043a8 <__libc_init_array+0xc>
 80043ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ce:	4798      	blx	r3
 80043d0:	3601      	adds	r6, #1
 80043d2:	e7f2      	b.n	80043ba <__libc_init_array+0x1e>
 80043d4:	0800443c 	.word	0x0800443c
 80043d8:	0800443c 	.word	0x0800443c
 80043dc:	0800443c 	.word	0x0800443c
 80043e0:	08004440 	.word	0x08004440

080043e4 <memset>:
 80043e4:	4402      	add	r2, r0
 80043e6:	4603      	mov	r3, r0
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d100      	bne.n	80043ee <memset+0xa>
 80043ec:	4770      	bx	lr
 80043ee:	f803 1b01 	strb.w	r1, [r3], #1
 80043f2:	e7f9      	b.n	80043e8 <memset+0x4>

080043f4 <_init>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	bf00      	nop
 80043f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fa:	bc08      	pop	{r3}
 80043fc:	469e      	mov	lr, r3
 80043fe:	4770      	bx	lr

08004400 <_fini>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	bf00      	nop
 8004404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004406:	bc08      	pop	{r3}
 8004408:	469e      	mov	lr, r3
 800440a:	4770      	bx	lr
